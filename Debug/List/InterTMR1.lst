###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.1.14183/W32 for ARM       12/Jun/2020  11:30:59
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  D:\Users\Chirikalo\ARM_proj\AT1315_for_test\InterTMR1.cpp
#    Command line =  
#        -f C:\Users\CHIRIK~1\AppData\Local\Temp\EWCB06.tmp
#        (D:\Users\Chirikalo\ARM_proj\AT1315_for_test\InterTMR1.cpp -lCN
#        D:\Users\Chirikalo\ARM_proj\AT1315_for_test\Debug\List -o
#        D:\Users\Chirikalo\ARM_proj\AT1315_for_test\Debug\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=ARM7TDMI-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" --cpu_mode arm -Om
#        --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        D:\Users\Chirikalo\ARM_proj\AT1315_for_test\Debug\List\InterTMR1.lst
#    Object file  =  
#        D:\Users\Chirikalo\ARM_proj\AT1315_for_test\Debug\Obj\InterTMR1.o
#
###############################################################################

D:\Users\Chirikalo\ARM_proj\AT1315_for_test\InterTMR1.cpp
      1          /********************************************************************************************/
      2          /*        пп обработки  TIMR1 (IRQ) прерывания - счетчик живого времени набора спектра      */
      3          /*******************************************************************************************/
      4          
      5          #include <intrinsics.h>
      6          #include <NXP/iolpc2294.h>

   \                                 In section .noinit, at 0xfffff108
   \   __absolute unsigned long volatile VICVectAddr2
   \                     VICVectAddr2:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xfffff208
   \   __absolute union <unnamed>#186 volatile _A_VICVectCntl2
   \                     _A_VICVectCntl2:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008000
   \   __absolute union <unnamed>#376 volatile _A_T1IR
   \                     _A_T1IR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008004
   \   __absolute union <unnamed>#377 volatile _A_T1TCR
   \                     _A_T1TCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008008
   \   __absolute unsigned long volatile T1TC
   \                     T1TC:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe000800c
   \   __absolute unsigned long volatile T1PR
   \                     T1PR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008010
   \   __absolute unsigned long volatile T1PC
   \                     T1PC:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008014
   \   __absolute union <unnamed>#378 volatile _A_T1MCR
   \                     _A_T1MCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008018
   \   __absolute unsigned long volatile T1MR0
   \                     T1MR0:
   \   00000000                      DS8 4
      7          #include "my_macros.h"
      8          /**************************************************************************/
      9          #define TCR_ENABLE    0x1       /* timer TCR bit 0 =1-enable counting */
     10          #define TCR_RESET     0x2       /* timer TCR bit 1 =1-reset and sinch count and pres */
     11          #define MATCH_0_INTERRUPT 0x1       /* bit enable interrapt for MR0  */
     12          #define MATCH_0_RESET     0x2       /* bit reset TC  for MR0  */
     13          
     14          extern unsigned int TIMEIZMsek;//@@@@@@@@ @@@@@ @@@@@@@@@
     15          extern unsigned int PCLK_VPB;
     16          extern void STOPEINT0(void);
     17          extern __BITFLAG FLAG;   //@@@ @ macros
     18          
     19          static void TimerInterrupt1(void);

   \                                 In section .bss, align 1
     20          unsigned char gpi1;//@@@@@@@
   \                     gpi1:
   \   00000000                      DS8 1
     21          extern unsigned short TEST_pause;

   \                                 In section .bss, align 4
     22          unsigned int T1TC_stop;
   \                     T1TC_stop:
   \   00000000                      DS8 4
     23          
     24          /*****************************************************
     25           * Initialise timer 1
     26           ****************************************************/

   \                                 In section .text, align 4, keep-with-next
     27          void InitialiseTimer1(void)
     28          {
     29          //   extern void handle_timer1(void);
     30          
     31          
     32             VICVectCntl2  = 0x25;    			  		/* vector timer 1 as highest priority and enabled */
   \                     InitialiseTimer1:
   \   00000000   0xE3E000F7         MVN      R0,#+247
   \   00000004   0xE3C00EE0         BIC      R0,R0,#0xE00
   \   00000008   0xE3A01025         MOV      R1,#+37
   \   0000000C   0xE5801100         STR      R1,[R0, #+256]
     33             VICVectAddr2  = (int) TimerInterrupt1;	  		/* vector timer 1 interrupt address */
   \   00000010   0x........         ADR      R1,TimerInterrupt1
   \   00000014   0xE5801000         STR      R1,[R0, #+0]
     34          
     35             T1TCR = TCR_RESET; //@@@@@@@@ @@@@@@@
   \   00000018   0xE3A0024E         MOV      R0,#-536870908
   \   0000001C   0xE3800C80         ORR      R0,R0,#0x8000
   \   00000020   0xE3A01002         MOV      R1,#+2
   \   00000024   0xE5801000         STR      R1,[R0, #+0]
     36             T1TCR = 0;         //@@@@@@@@@@ @@@@@@@
   \   00000028   0xE3A01000         MOV      R1,#+0
   \   0000002C   0xE5801000         STR      R1,[R0, #+0]
     37          
     38             T1PC = 0;   // Initialise the prescale counter to 0...
   \   00000030   0xE580100C         STR      R1,[R0, #+12]
     39          
     40             //~1uSek @@@ (1000000:14 745 M@@=67,82[*4@@@@@@] )nSek*3686/1000000=~0,999938..mSek ; =4608*-@@@ 18 432 @@@=1,85..uSek;
     41             //(@.@. Pclk = Cclk @@@@@@ @@@ @@@@@@ VPB)
     42             T1PR = PCLK_VPB;  //@@@ @@@@@@@@@@@@@ 999991,294uSek~~1mSek
   \   00000034   0x........         LDR      R1,??DataTable1
   \   00000038   0xE5911000         LDR      R1,[R1, #+0]
   \   0000003C   0xE5801008         STR      R1,[R0, #+8]
     43          
     44             T1MCR = MATCH_0_INTERRUPT | MATCH_0_RESET ;
   \   00000040   0xE3A01003         MOV      R1,#+3
   \   00000044   0xE5801010         STR      R1,[R0, #+16]
     45             T1MR0 = TIMEIZMsek*1000; //  = msek @@@@@@
   \   00000048   0x........         LDR      R1,??DataTable1_1
   \   0000004C   0xE5911000         LDR      R1,[R1, #+0]
   \   00000050   0xE3A02FFA         MOV      R2,#+1000
   \   00000054   0xE0010192         MUL      R1,R2,R1
   \   00000058   0xE5801014         STR      R1,[R0, #+20]
     46             T1TC_stop = 1;
   \   0000005C   0xE3A00001         MOV      R0,#+1
   \   00000060   0x........         LDR      R1,??DataTable1_2
   \   00000064   0xE5810000         STR      R0,[R1, #+0]
     47          //   gpi1=0;//@@@@@@@
     48          }
   \   00000068   0xE12FFF1E         BX       LR               ;; return
   \   0000006C                      REQUIRE _A_VICVectCntl2
   \   0000006C                      REQUIRE VICVectAddr2
   \   0000006C                      REQUIRE _A_T1TCR
   \   0000006C                      REQUIRE T1PC
   \   0000006C                      REQUIRE T1PR
   \   0000006C                      REQUIRE _A_T1MCR
   \   0000006C                      REQUIRE T1MR0
     49          /*****************************************************/

   \                                 In section .text, align 4, keep-with-next
     50          void TimerInterrupt1(void)
     51          {
   \                     TimerInterrupt1:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
     52          //  IO0CLR = 0xF0;   /*@@@ @@@@@@@*/
     53          //  gpi1=~gpi1 & 0x80;
     54          //  IO0SET = gpi1;   /*@@@ @@@@@@@*/
     55          
     56          //  T1TCR = TCR_RESET;
     57          // Clear the interrupt bit within the IR register...
     58            STOPEINT0();  //@@@@@@@@@@ @@@@@ @@@@@@@ @@@@@@@@@ @@@@@,@@@@@@@@@@ @@@@@@@
   \   00000004   0x........         BL       STOPEINT0
     59            FLAG.SPECTR = 0; //@@@@@@@@@ @@@@@@@@@@ @@@@@@@
   \   00000008   0x........         LDR      R0,??DataTable1_3
   \   0000000C   0xE5901000         LDR      R1,[R0, #+0]
   \   00000010   0xE3C11010         BIC      R1,R1,#0x10
   \   00000014   0xE5801000         STR      R1,[R0, #+0]
     60            T1TC_stop = T1TC;
   \   00000018   0xE3A004E0         MOV      R0,#-536870912
   \   0000001C   0xE3800C80         ORR      R0,R0,#0x8000
   \   00000020   0xE5901008         LDR      R1,[R0, #+8]
   \   00000024   0x........         LDR      R2,??DataTable1_2
   \   00000028   0xE5821000         STR      R1,[R2, #+0]
     61            T1IR = 0xFF;    //@@@@@ @@@@@@@@@@
   \   0000002C   0xE3A010FF         MOV      R1,#+255
   \   00000030   0xE5801000         STR      R1,[R0, #+0]
     62          //  T1TCR = TCR_ENABLE;
     63          
     64          }
   \   00000034   0xE8BD4001         POP      {R0,LR}
   \   00000038   0xE12FFF1E         BX       LR               ;; return
   \   0000003C                      REQUIRE T1TC
   \   0000003C                      REQUIRE _A_T1IR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     PCLK_VPB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     TIMEIZMsek

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     T1TC_stop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     FLAG
     65          /*****************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   InitialiseTimer1
       8   TimerInterrupt1
         8   -> STOPEINT0


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
     108  InitialiseTimer1
       4  T1MR0
       4  T1PC
       4  T1PR
       4  T1TC
       4  T1TC_stop
      60  TimerInterrupt1
       4  VICVectAddr2
       4  _A_T1IR
       4  _A_T1MCR
       4  _A_T1TCR
       4  _A_VICVectCntl2
       1  gpi1

 
   5 bytes in section .bss
  36 bytes in section .noinit  (abs)
 184 bytes in section .text
 
 184 bytes of CODE memory
   5 bytes of DATA memory (+ 36 bytes shared)

Errors: none
Warnings: none
