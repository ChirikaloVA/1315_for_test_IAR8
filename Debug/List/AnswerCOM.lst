###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.1.14183/W32 for ARM       12/Jun/2020  11:30:59
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  D:\Users\Chirikalo\ARM_proj\AT1315_for_test\AnswerCOM.cpp
#    Command line =  
#        -f C:\Users\CHIRIK~1\AppData\Local\Temp\EWC525.tmp
#        (D:\Users\Chirikalo\ARM_proj\AT1315_for_test\AnswerCOM.cpp -lCN
#        D:\Users\Chirikalo\ARM_proj\AT1315_for_test\Debug\List -o
#        D:\Users\Chirikalo\ARM_proj\AT1315_for_test\Debug\Obj --no_unroll
#        --no_inline --no_tbaa --no_scheduling --debug --endian=little
#        --cpu=ARM7TDMI-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" --cpu_mode arm -Om
#        --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        D:\Users\Chirikalo\ARM_proj\AT1315_for_test\Debug\List\AnswerCOM.lst
#    Object file  =  
#        D:\Users\Chirikalo\ARM_proj\AT1315_for_test\Debug\Obj\AnswerCOM.o
#
###############################################################################

D:\Users\Chirikalo\ARM_proj\AT1315_for_test\AnswerCOM.cpp
      1          /******************************************************/
      2          /*             пп обработки  полученных команд       */
      3          /****************************************************/
      4          #include <NXP/iolpc2294.h>

   \                                 In section .noinit, at 0xe01fc140
   \   __absolute union <unnamed>#159 volatile _A_EXTINT
   \                     _A_EXTINT:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xfffff010
   \   __absolute union <unnamed>#178 volatile _A_VICIntEnable
   \                     _A_VICIntEnable:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xfffff014
   \   __absolute union <unnamed>#179 volatile _A_VICIntEnClear
   \                     _A_VICIntEnClear:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe000c000
   \   __absolute unsigned char volatile U0RBRTHR
   \                     U0RBRTHR:
   \   00000000                      DS8 1

   \                                 In section .noinit, at 0xe000c014
   \   __absolute union <unnamed>#230 const volatile _A_U0LSR
   \                     _A_U0LSR:
   \   00000000                      DS8 1

   \                                 In section .noinit, at 0xe0008004
   \   __absolute union <unnamed>#376 volatile _A_T1TCR
   \                     _A_T1TCR:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008008
   \   __absolute unsigned long volatile T1TC
   \                     T1TC:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008010
   \   __absolute unsigned long volatile T1PC
   \                     T1PC:
   \   00000000                      DS8 4

   \                                 In section .noinit, at 0xe0008018
   \   __absolute unsigned long volatile T1MR0
   \                     T1MR0:
   \   00000000                      DS8 4
      5          #include <intrinsics.h>
      6          #include "my_macros.h"
      7          
      8          extern unsigned char COMMAND[16];
      9          extern unsigned int ByteCOMMAND;
     10          //extern unsigned char SPECTR[3075],BUFFSPECTR[3075];
     11          
     12          
     13          extern unsigned char BUFFSPECTR[3075];
     14          extern unsigned long SPECTR[1025];
     15          
     16          extern unsigned char MasEEPROMKoef[17];
     17          extern unsigned char LiveTime[4];
     18          extern __BITFLAG FLAG;   //@@@ @ macros
     19          extern unsigned char FLAGOver3byte;
     20          extern unsigned char lock;
     21          extern unsigned char MasInt[6];
     22          
     23          extern int Temp_i;
     24          
     25          extern unsigned char Test_WDT_cnt;
     26          extern unsigned char WDMOD_temp;
     27          
     28          #define INTERENT0   0x4000 /* bit 14h int*/
     29          unsigned char CurrentDIzm [226]; //@@@@@@@ @@@@@@ @@@@@@@@@ 223 + CRC 2 @@@@@
     30          int ByteCurrentIzm;
     31          unsigned char flagTIME2;  //@@@@ @@@@@@ @@@@@@@ @@ 2 @@@@@
     32          unsigned char TimeByte;    //@@@-@@ @@@@ @ @@@@@@@@@@@@@ @@@@@@@ 4 @@@ 2
     33          

   \                                 In section .bss, align 4
     34          unsigned char COMMAND_temp[8];
   \                     COMMAND_temp:
   \   00000000                      DS8 8

   \                                 In section .data, align 4
     35          /////////////////
     36          void STOPEINT0(void);
     37          void STARTEINT0(void);
     38          void I2CTABLTempFlagW(void);
     39          
     40          /***********************************************************************/
     41          extern void ClearSPECTR (void);
     42          extern void ClearCOMMAND (void);
     43          extern void InitialiseTimer1(void); //@@@@@@ @@@@@@@ @@@@@@ @@@@@@@
     44          extern void InitialiseUART0(unsigned char speed);
     45          extern void ZAPFACTOR (unsigned short factor,unsigned char nf);
     46          extern unsigned  short I2CKOEFF(int IndMas);
     47          extern void I2CTABLTempW(void);
     48          extern void I2CTABLTempR(void);
     49          extern void DeInitialiseI2C(void);
     50          extern void I2CMasKoefW (void);
     51          extern void I2CMasKoefR (void);
     52          extern unsigned int TIMEIZMsek;//@@@@@@@@ @@@@@ @@@@@@@@@
     53          extern unsigned short KODADC;   //@@@@@@@@@@@ @@@@@@@@ @@@@@@@
     54          extern unsigned short KODADCEEPROM;   //@@@@@@@@@@@ @@@@@@@@  @ EEPROM
     55          extern unsigned short MINPOROG; //@@@@@@ @@@@@
     56          extern unsigned short MAXPOROG; //@@@@@@@ @@@@@
     57          extern float TEMPERFLOATtek;
     58          extern float TEMPERFLOAT; //@@@@@@@
     59          extern unsigned char TABLTemperCORR[126]; //@@@@@@@ @@@@@@ @@@@@@@@@ 61 @@@@ @@ 2 @@@@@ +CRC 2@+ 1@ @@@@
     60          extern void I2CIntevarTemperW(void);
     61          extern void ReadEEPROMIntervalTemper(void);
     62          extern float TIMER0_INTERVAL;     //120000.0@@@@@@@@ @ msek // @@@@@@ 2 @@@@@@  - @@@@@@@@@ @@@@@@@@@@@
     63          extern void InitialiseTimer0(void);
     64          extern void SETKOEFF(void);
     65          extern void RESETTMR0(void);
     66          extern unsigned int T1TC_stop;
     67          extern unsigned char FL_test;
     68          extern unsigned int T1TC_temp;
     69          
     70          /**********************************************************************/
     71          /* Table of CRC values for high-order byte */
     72          static unsigned char auchCRCHi[] = {
     73          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     74          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     75          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
     76          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     77          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
     78          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     79          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
     80          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     81          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     82          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
     83          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
     84          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     85          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     86          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
     87          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
     88          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     89          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     90          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     91          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
     92          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     93          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
     94          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
     95          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
     96          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     97          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
     98          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
     99          } ;
    100          
    101          /* Table of CRC values for low-order byte */
    102          static char auchCRCLo[] = {
    103          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    104          0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    105          0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    106          0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    107          0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    108          0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    109          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    110          0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    111          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    112          0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    113          0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    114          0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    115          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    116          0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    117          0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    118          0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    119          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    120          0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    121          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    122          0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    123          0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    124          0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    125          0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    126          0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    127          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    128          0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    129          } ;
    130          
    131          void COM3(void);
    132          void COM4(void);
    133          void COM5(void);
    134          void COM6(void);
    135          void COM7(void);
    136          void COM8(void);
    137          void COMB(void);
    138          void COM11(void);
    139          void COM12(void);
    140          void COM13(void);
    141          void COM15(void);
    142          void COMerr(char kod);
    143          unsigned short CRChi,CRClo;
   \                     CRChi:
   \   00000000   0x00 0x00          DC8 0, 0
   \                     CRClo:
   \   00000002   0x00 0x00          DC8 0, 0
   \                     ByteCurrentIzm:
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    144          void COM20(void);
    145          /****************************************************************************/
    146          struct
    147                {unsigned char FractionPart;      //@@. @@@@@ - @@@@@@@ @@@@@@
    148                 unsigned char IntegerPart;      //@@ @@@@@ - @@@@@ @@@@@ @@@@@@@@
    149                }TEMPERATURE;
   \                     TEMPERATURE:
   \   00000008   0x00 0x00          DC8 0, 0
   \                     flagTIME2:
   \   0000000A   0x00               DC8 0
   \                     TimeByte:
   \   0000000B   0x00               DC8 0
   \                     CurrentDIzm:
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000001C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000006C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000007C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000008C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000009C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000100   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000110   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000120   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000130   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000140   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000150   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000160   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000170   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000180   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000190   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000001A0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000001B0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000001C0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000001D0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000001E0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000001F0   0x00 0xC0          DC8 0, 192, 193, 1, 195, 3, 2, 194, 198, 6, 7, 199, 5, 197, 196, 4, 204
   \              0xC1 0x01    
   \              0xC3 0x03    
   \              0x02 0xC2    
   \              0xC6 0x06    
   \              0x07 0xC7    
   \              0x05 0xC5    
   \              0xC4 0x04    
   \              0xCC         
   \   00000201   0x0C 0x0D          DC8 12, 13, 205, 15, 207, 206, 14, 10, 202, 203, 11, 201, 9, 8, 200
   \              0xCD 0x0F    
   \              0xCF 0xCE    
   \              0x0E 0x0A    
   \              0xCA 0xCB    
   \              0x0B 0xC9    
   \              0x09 0x08    
   \              0xC8         
   \   00000210   0xD8 0x18          DC8 216, 24, 25, 217, 27, 219, 218, 26, 30, 222, 223, 31, 221, 29, 28
   \              0x19 0xD9    
   \              0x1B 0xDB    
   \              0xDA 0x1A    
   \              0x1E 0xDE    
   \              0xDF 0x1F    
   \              0xDD 0x1D    
   \              0x1C         
   \   0000021F   0xDC 0x14          DC8 220, 20, 212, 213, 21, 215, 23, 22, 214, 210, 18, 19, 211, 17, 209
   \              0xD4 0xD5    
   \              0x15 0xD7    
   \              0x17 0x16    
   \              0xD6 0xD2    
   \              0x12 0x13    
   \              0xD3 0x11    
   \              0xD1         
   \   0000022E   0xD0 0x10          DC8 208, 16, 240, 48, 49, 241, 51, 243, 242, 50, 54, 246, 247, 55, 245
   \              0xF0 0x30    
   \              0x31 0xF1    
   \              0x33 0xF3    
   \              0xF2 0x32    
   \              0x36 0xF6    
   \              0xF7 0x37    
   \              0xF5         
   \   0000023D   0x35 0x34          DC8 53, 52, 244, 60, 252, 253, 61, 255, 63, 62, 254, 250, 58, 59, 251
   \              0xF4 0x3C    
   \              0xFC 0xFD    
   \              0x3D 0xFF    
   \              0x3F 0x3E    
   \              0xFE 0xFA    
   \              0x3A 0x3B    
   \              0xFB         
   \   0000024C   0x39 0xF9          DC8 57, 249, 248, 56, 40, 232, 233, 41, 235, 43, 42, 234, 238, 46, 47
   \              0xF8 0x38    
   \              0x28 0xE8    
   \              0xE9 0x29    
   \              0xEB 0x2B    
   \              0x2A 0xEA    
   \              0xEE 0x2E    
   \              0x2F         
   \   0000025B   0xEF 0x2D          DC8 239, 45, 237, 236, 44, 228, 36, 37, 229, 39, 231, 230, 38, 34, 226
   \              0xED 0xEC    
   \              0x2C 0xE4    
   \              0x24 0x25    
   \              0xE5 0x27    
   \              0xE7 0xE6    
   \              0x26 0x22    
   \              0xE2         
   \   0000026A   0xE3 0x23          DC8 227, 35, 225, 33, 32, 224, 160, 96, 97, 161, 99, 163, 162, 98, 102
   \              0xE1 0x21    
   \              0x20 0xE0    
   \              0xA0 0x60    
   \              0x61 0xA1    
   \              0x63 0xA3    
   \              0xA2 0x62    
   \              0x66         
   \   00000279   0xA6 0xA7          DC8 166, 167, 103, 165, 101, 100, 164, 108, 172, 173, 109, 175, 111
   \              0x67 0xA5    
   \              0x65 0x64    
   \              0xA4 0x6C    
   \              0xAC 0xAD    
   \              0x6D 0xAF    
   \              0x6F         
   \   00000286   0x6E 0xAE          DC8 110, 174, 170, 106, 107, 171, 105, 169, 168, 104, 120, 184, 185
   \              0xAA 0x6A    
   \              0x6B 0xAB    
   \              0x69 0xA9    
   \              0xA8 0x68    
   \              0x78 0xB8    
   \              0xB9         
   \   00000293   0x79 0xBB          DC8 121, 187, 123, 122, 186, 190, 126, 127, 191, 125, 189, 188, 124
   \              0x7B 0x7A    
   \              0xBA 0xBE    
   \              0x7E 0x7F    
   \              0xBF 0x7D    
   \              0xBD 0xBC    
   \              0x7C         
   \   000002A0   0xB4 0x74          DC8 180, 116, 117, 181, 119, 183, 182, 118, 114, 178, 179, 115, 177
   \              0x75 0xB5    
   \              0x77 0xB7    
   \              0xB6 0x76    
   \              0x72 0xB2    
   \              0xB3 0x73    
   \              0xB1         
   \   000002AD   0x71 0x70          DC8 113, 112, 176, 80, 144, 145, 81, 147, 83, 82, 146, 150, 86, 87, 151
   \              0xB0 0x50    
   \              0x90 0x91    
   \              0x51 0x93    
   \              0x53 0x52    
   \              0x92 0x96    
   \              0x56 0x57    
   \              0x97         
   \   000002BC   0x55 0x95          DC8 85, 149, 148, 84, 156, 92, 93, 157, 95, 159, 158, 94, 90, 154, 155
   \              0x94 0x54    
   \              0x9C 0x5C    
   \              0x5D 0x9D    
   \              0x5F 0x9F    
   \              0x9E 0x5E    
   \              0x5A 0x9A    
   \              0x9B         
   \   000002CB   0x5B 0x99          DC8 91, 153, 89, 88, 152, 136, 72, 73, 137, 75, 139, 138, 74, 78, 142
   \              0x59 0x58    
   \              0x98 0x88    
   \              0x48 0x49    
   \              0x89 0x4B    
   \              0x8B 0x8A    
   \              0x4A 0x4E    
   \              0x8E         
   \   000002DA   0x8F 0x4F          DC8 143, 79, 141, 77, 76, 140, 68, 132, 133, 69, 135, 71, 70, 134, 130
   \              0x8D 0x4D    
   \              0x4C 0x8C    
   \              0x44 0x84    
   \              0x85 0x45    
   \              0x87 0x47    
   \              0x46 0x86    
   \              0x82         
   \   000002E9   0x42 0x43          DC8 66, 67, 131, 65, 129, 128, 64
   \              0x83 0x41    
   \              0x81 0x80    
   \              0x40         
    150          /****************************************************************************/
    151          /****** @@@@@@@ @@@@@@@@@@@ @@@@@ ************/

   \                                 In section .text, align 4, keep-with-next
    152          void CRC16(unsigned char mas[],short usDataLen,char flFF,char flzapCOMMand)
    153          //(mas,usDataLen,flFF,flzapCOMMand) // @@ @@@@@@ @@@@@ @@@@@@@@@ -extern
    154          //unsigned char *mas;
    155          //unsigned short usDataLen; /*@@@-@@ @@@@*/
    156          //unsigned char flFF,flzapCOMMand; /* @@@@ @@@@@@ crc, @@@@ @@@@@@ crc @ @@@ COMMAND*/
    157          {
   \                     CRC16:
   \   00000000   0xE92D4038         PUSH     {R3-R5,LR}
    158            unsigned uIndex,kolData;
    159          
    160            kolData = usDataLen;  //@@@@@@@@@@ @@@@ @@@
   \   00000004   0xE1A0C001         MOV      R12,R1
    161            if (flFF)
   \   00000008   0xE3520000         CMP      R2,#+0
   \   0000000C   0x0A00000F         BEQ      ??CRC16_0
    162            {  CRChi = CRClo = 0xFF;
   \   00000010   0x........         LDR      R2,??DataTable18
   \   00000014   0xE3A0E0FF         MOV      LR,#+255
   \   00000018   0xE1C2E0B2         STRH     LR,[R2, #+2]
   \   0000001C   0xE1C2E0B0         STRH     LR,[R2, #+0]
   \   00000020   0xEA00000A         B        ??CRC16_0
    163                } //if flFF
    164          
    165            while (usDataLen--)
    166            {
    167              uIndex = CRChi ^ *mas++;
   \                     ??CRC16_1:
   \   00000024   0x........         LDR      R2,??DataTable18
   \   00000028   0xE1D2E0B0         LDRH     LR,[R2, #+0]
   \   0000002C   0xE4D04001         LDRB     R4,[R0], #+1
   \   00000030   0xE024E00E         EOR      LR,R4,LR
    168              CRChi = CRClo ^ auchCRCHi[uIndex];
   \   00000034   0xE082E00E         ADD      LR,R2,LR
   \   00000038   0xE1D240B2         LDRH     R4,[R2, #+2]
   \   0000003C   0xE5DE50F0         LDRB     R5,[LR, #+240]
   \   00000040   0xE0254004         EOR      R4,R5,R4
   \   00000044   0xE1C240B0         STRH     R4,[R2, #+0]
    169              CRClo = auchCRCLo[uIndex];
   \   00000048   0xE5DEE1F0         LDRB     LR,[LR, #+496]
   \   0000004C   0xE1C2E0B2         STRH     LR,[R2, #+2]
    170            }// while
   \                     ??CRC16_0:
   \   00000050   0xE1A02001         MOV      R2,R1
   \   00000054   0xE2421001         SUB      R1,R2,#+1
   \   00000058   0xE1B02802         LSLS     R2,R2,#+16
   \   0000005C   0x1AFFFFF0         BNE      ??CRC16_1
    171            if (flzapCOMMand)
   \   00000060   0xE3530000         CMP      R3,#+0
   \   00000064   0x0A000006         BEQ      ??CRC16_2
    172            {  COMMAND[kolData]  = CRClo;
   \   00000068   0x........         LDR      R0,??DataTable18
   \   0000006C   0x........         LDR      R1,??DataTable19
   \   00000070   0xE1D020B2         LDRH     R2,[R0, #+2]
   \   00000074   0xE7C1200C         STRB     R2,[R1, +R12]
    173               kolData++;
    174               COMMAND[kolData] = CRChi;
   \   00000078   0xE1D000B0         LDRH     R0,[R0, #+0]
   \   0000007C   0xE081100C         ADD      R1,R1,R12
   \   00000080   0xE5C10001         STRB     R0,[R1, #+1]
    175            } //if (flzapCOMMand)
    176          }//CRC16
   \                     ??CRC16_2:
   \   00000084   0xE8BD4031         POP      {R0,R4,R5,LR}
   \   00000088   0xE12FFF1E         BX       LR               ;; return
    177          /***@@@@@@@@@@ @@@@@@ @@ imas @ rmas @@@ @@@@@@**/
    178          //void MOVSPECTR(imas,rmas)
    179          //unsigned char imas[3074],rmas[3074];
    180          //{
    181          //  int i;
    182          // for (i=3071;i >= 0; i-=3)
    183          // {
    184          // rmas[i]   = imas[i];
    185          // rmas[i-1] = imas[i-1];
    186          // rmas[i-2] = imas[i-2];
    187          // }
    188          //}//TURNSPECTR end

   \                                 In section .text, align 4, keep-with-next
    189          void MOVSPECTR_B_S(void)
    190          //unsigned char imas[3074],rmas[3074];
    191          {
   \                     MOVSPECTR_B_S:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    192            int i;
    193            for (i = 0; i < 1024; ++i)   //@@@@@@ @@@ @@@@@@@ @ @@@@@@@@ @@@
   \   00000004   0xE3A00000         MOV      R0,#+0
   \   00000008   0x........         LDR      R2,??DataTable19_1
   \   0000000C   0x........         LDR      R12,??DataTable19_2
   \   00000010   0xEA000009         B        ??MOVSPECTR_B_S_0
    194            {
    195              //BUFFSPECTR[i] = SPECTR[i];
    196              BUFFSPECTR[i*3 + 2] = *((char*)&SPECTR[i] + 2);
   \                     ??MOVSPECTR_B_S_1:
   \   00000014   0xE0801080         ADD      R1,R0,R0, LSL #+1
   \   00000018   0xE0823001         ADD      R3,R2,R1
   \   0000001C   0xE08CE100         ADD      LR,R12,R0, LSL #+2
   \   00000020   0xE5DE4002         LDRB     R4,[LR, #+2]
   \   00000024   0xE5C34002         STRB     R4,[R3, #+2]
    197              BUFFSPECTR[i*3 + 1] = *((char*)&SPECTR[i] + 1);
   \   00000028   0xE5DEE001         LDRB     LR,[LR, #+1]
   \   0000002C   0xE5C3E001         STRB     LR,[R3, #+1]
    198              BUFFSPECTR[i*3 + 0] = *((char*)&SPECTR[i] + 0);
   \   00000030   0xE7DC3100         LDRB     R3,[R12, +R0, LSL #+2]
   \   00000034   0xE7C23001         STRB     R3,[R2, +R1]
    199            }
   \   00000038   0xE2800001         ADD      R0,R0,#+1
   \                     ??MOVSPECTR_B_S_0:
   \   0000003C   0xE3500E40         CMP      R0,#+1024
   \   00000040   0xBAFFFFF3         BLT      ??MOVSPECTR_B_S_1
    200          
    201          
    202          }
   \   00000044   0xE8BD4010         POP      {R4,LR}
   \   00000048   0xE12FFF1E         BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
    203          void MOVSPECTR_S_B(void)
    204          //unsigned char imas[3074],rmas[3074];
    205          {
   \                     MOVSPECTR_S_B:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    206            int i;
    207            for (i = 0; i < 1024; ++i)   //@@@@@@ @@@ @@@@@@@ @ @@@@@@@@ @@@
   \   00000004   0xE3A00000         MOV      R0,#+0
   \   00000008   0x........         LDR      R1,??DataTable19_2
   \   0000000C   0x........         LDR      R12,??DataTable19_1
   \   00000010   0xEA000009         B        ??MOVSPECTR_S_B_0
    208            {
    209              //BUFFSPECTR[i] = SPECTR[i];
    210              *((char*)&SPECTR[i] + 2) = BUFFSPECTR[i*3 + 2];
   \                     ??MOVSPECTR_S_B_1:
   \   00000014   0xE0812100         ADD      R2,R1,R0, LSL #+2
   \   00000018   0xE0803080         ADD      R3,R0,R0, LSL #+1
   \   0000001C   0xE08CE003         ADD      LR,R12,R3
   \   00000020   0xE5DE4002         LDRB     R4,[LR, #+2]
   \   00000024   0xE5C24002         STRB     R4,[R2, #+2]
    211              *((char*)&SPECTR[i] + 1) = BUFFSPECTR[i*3 + 1];
   \   00000028   0xE5DEE001         LDRB     LR,[LR, #+1]
   \   0000002C   0xE5C2E001         STRB     LR,[R2, #+1]
    212              *((char*)&SPECTR[i] + 0) = BUFFSPECTR[i*3 + 0];
   \   00000030   0xE7DC2003         LDRB     R2,[R12, +R3]
   \   00000034   0xE7C12100         STRB     R2,[R1, +R0, LSL #+2]
    213            }
   \   00000038   0xE2800001         ADD      R0,R0,#+1
   \                     ??MOVSPECTR_S_B_0:
   \   0000003C   0xE3500E40         CMP      R0,#+1024
   \   00000040   0xBAFFFFF3         BLT      ??MOVSPECTR_S_B_1
    214          
    215          
    216          }
   \   00000044   0xE8BD4010         POP      {R4,LR}
   \   00000048   0xE12FFF1E         BX       LR               ;; return
    217          /****************************************************************************/
    218          
    219          /***@@@@@@@@@@ @@@@@@ @@ imas C @@@@@@@@@@@@@@@@ @@@@@@@@ @ rmas @@@ @@@@@@**/

   \                                 In section .text, align 4, keep-with-next
    220          void TURNSPECTR(imas,rmas)
    221          unsigned char imas[3074],rmas[3074];
    222          {
    223            int i;
    224           for (i=3071;i >= 0; i-=3)
   \                     TURNSPECTR:
   \   00000000   0xE3A020FF         MOV      R2,#+255
   \   00000004   0xE3822EB0         ORR      R2,R2,#0xB00
   \   00000008   0xEA000009         B        ??TURNSPECTR_0
    225           {
    226           rmas[i]   = imas[i-2];
   \                     ??TURNSPECTR_1:
   \   0000000C   0xE0803002         ADD      R3,R0,R2
   \   00000010   0xE5533002         LDRB     R3,[R3, #-2]
   \   00000014   0xE7C13002         STRB     R3,[R1, +R2]
    227           rmas[i-1] = imas[i-1];
   \   00000018   0xE0803002         ADD      R3,R0,R2
   \   0000001C   0xE5533001         LDRB     R3,[R3, #-1]
   \   00000020   0xE081C002         ADD      R12,R1,R2
   \   00000024   0xE54C3001         STRB     R3,[R12, #-1]
    228           rmas[i-2] = imas[i];
   \   00000028   0xE7D03002         LDRB     R3,[R0, +R2]
   \   0000002C   0xE54C3002         STRB     R3,[R12, #-2]
    229           }
   \   00000030   0xE2422003         SUB      R2,R2,#+3
   \                     ??TURNSPECTR_0:
   \   00000034   0xE3520000         CMP      R2,#+0
   \   00000038   0x5AFFFFF3         BPL      ??TURNSPECTR_1
    230          }//TURNSPECTR end
   \   0000003C   0xE12FFF1E         BX       LR               ;; return
    231          

   \                                 In section .text, align 4, keep-with-next
    232          void TURNSPECTR_B_S(void)
    233          //unsigned char imas[3074],rmas[3074];
    234          {
   \                     TURNSPECTR_B_S:
   \   00000000   0xE92D4000         PUSH     {LR}
    235            int i;
    236            for (i = 0; i < 1024; ++i)   //@@@@@@ @@@ @@@@@@@ @ @@@@@@@@ @@@
   \   00000004   0xE3A00000         MOV      R0,#+0
   \   00000008   0x........         LDR      R12,??DataTable19_1
   \   0000000C   0xEA00000A         B        ??TURNSPECTR_B_S_0
    237            {
    238              //BUFFSPECTR[i] = SPECTR[i];
    239              BUFFSPECTR[i*3 + 0] = *((char*)&SPECTR[i] + 2);
   \                     ??TURNSPECTR_B_S_1:
   \   00000010   0x........         LDR      R1,??DataTable19_2
   \   00000014   0xE0812100         ADD      R2,R1,R0, LSL #+2
   \   00000018   0xE0803080         ADD      R3,R0,R0, LSL #+1
   \   0000001C   0xE5D2E002         LDRB     LR,[R2, #+2]
   \   00000020   0xE7CCE003         STRB     LR,[R12, +R3]
    240              BUFFSPECTR[i*3 + 1] = *((char*)&SPECTR[i] + 1);
   \   00000024   0xE08C3003         ADD      R3,R12,R3
   \   00000028   0xE5D22001         LDRB     R2,[R2, #+1]
   \   0000002C   0xE5C32001         STRB     R2,[R3, #+1]
    241              BUFFSPECTR[i*3 + 2] = *((char*)&SPECTR[i] + 0);
   \   00000030   0xE7D11100         LDRB     R1,[R1, +R0, LSL #+2]
   \   00000034   0xE5C31002         STRB     R1,[R3, #+2]
    242            }
   \   00000038   0xE2800001         ADD      R0,R0,#+1
   \                     ??TURNSPECTR_B_S_0:
   \   0000003C   0xE3500E40         CMP      R0,#+1024
   \   00000040   0xBAFFFFF2         BLT      ??TURNSPECTR_B_S_1
    243          
    244          
    245          }
   \   00000044   0xE8BD4000         POP      {LR}
   \   00000048   0xE12FFF1E         BX       LR               ;; return
    246          

   \                                 In section .text, align 4, keep-with-next
    247          void TURNSPECTR_S_B(void)
    248          //unsigned char imas[3074],rmas[3074];
    249          {
   \                     TURNSPECTR_S_B:
   \   00000000   0xE92D4000         PUSH     {LR}
    250            int i;
    251            for (i = 0; i < 1024; ++i)   //@@@@@@ @@@ @@@@@@@ @ @@@@@@@@ @@@
   \   00000004   0xE3A00000         MOV      R0,#+0
   \   00000008   0x........         LDR      R2,??DataTable19_1
   \   0000000C   0xEA00000A         B        ??TURNSPECTR_S_B_0
    252            {
    253              //BUFFSPECTR[i] = SPECTR[i];
    254              *((char*)&SPECTR[i] + 0) = BUFFSPECTR[i*3 + 2];
   \                     ??TURNSPECTR_S_B_1:
   \   00000010   0xE0801080         ADD      R1,R0,R0, LSL #+1
   \   00000014   0xE0823001         ADD      R3,R2,R1
   \   00000018   0x........         LDR      R12,??DataTable19_2
   \   0000001C   0xE5D3E002         LDRB     LR,[R3, #+2]
   \   00000020   0xE7CCE100         STRB     LR,[R12, +R0, LSL #+2]
    255              *((char*)&SPECTR[i] + 1) = BUFFSPECTR[i*3 + 1];
   \   00000024   0xE08CC100         ADD      R12,R12,R0, LSL #+2
   \   00000028   0xE5D33001         LDRB     R3,[R3, #+1]
   \   0000002C   0xE5CC3001         STRB     R3,[R12, #+1]
    256              *((char*)&SPECTR[i] + 2) = BUFFSPECTR[i*3 + 0];
   \   00000030   0xE7D21001         LDRB     R1,[R2, +R1]
   \   00000034   0xE5CC1002         STRB     R1,[R12, #+2]
    257            }
   \   00000038   0xE2800001         ADD      R0,R0,#+1
   \                     ??TURNSPECTR_S_B_0:
   \   0000003C   0xE3500E40         CMP      R0,#+1024
   \   00000040   0xBAFFFFF2         BLT      ??TURNSPECTR_S_B_1
    258          
    259          
    260          }
   \   00000044   0xE8BD4000         POP      {LR}
   \   00000048   0xE12FFF1E         BX       LR               ;; return
    261          
    262          /****************************************************************************/
    263          /********* @@@@@@@@@ @@@@@@@@@@@ *********/

   \                                 In section .text, align 4, keep-with-next
    264          void TakingTemperature(void)
    265          {
   \                     TakingTemperature:
   \   00000000   0xE92D41F0         PUSH     {R4-R8,LR}
    266            float ttt;
    267            if (FLAG.temperCORR)
   \   00000004   0x........         LDR      R0,??DataTable20
   \   00000008   0xE5900000         LDR      R0,[R0, #+0]
   \   0000000C   0xE3A01001         MOV      R1,#+1
   \   00000010   0xE11107A0         TST      R1,R0, LSR #+15
   \   00000014   0x0A000002         BEQ      ??TakingTemperature_0
    268              ttt = TEMPERFLOAT;    //@@@@ @@@@@ @@@@@@ @@@@@@@@@ @@@@@@@@ @@@@@@@
   \   00000018   0x........         LDR      R0,??DataTable20_1
   \   0000001C   0xE5904000         LDR      R4,[R0, #+0]
   \   00000020   0xEA000001         B        ??TakingTemperature_1
    269            else
    270                  ttt = TEMPERFLOATtek;
   \                     ??TakingTemperature_0:
   \   00000024   0x........         LDR      R0,??DataTable20_2
   \   00000028   0xE5904000         LDR      R4,[R0, #+0]
    271          
    272            if (ttt > 0)
   \                     ??TakingTemperature_1:
   \   0000002C   0xE1A00004         MOV      R0,R4
   \   00000030   0x........         BL       __aeabi_f2iz
   \   00000034   0xE1A06000         MOV      R6,R0
   \   00000038   0x........         LDR      R7,??DataTable18
   \   0000003C   0xE1A00004         MOV      R0,R4
   \   00000040   0xE3A01000         MOV      R1,#+0
   \   00000044   0x........         BL       __aeabi_cfrcmple
   \   00000048   0x2A00001D         BCS      ??TakingTemperature_2
    273            {
    274            TEMPERATURE.IntegerPart = (char) ttt;
   \   0000004C   0xE5C76009         STRB     R6,[R7, #+9]
    275            TEMPERATURE.FractionPart = (char) (ttt*10.0) - (TEMPERATURE.IntegerPart*10.0);
   \   00000050   0x........         BL       __aeabi_f2d
   \   00000054   0xE1A02000         MOV      R2,R0
   \   00000058   0xE1A03001         MOV      R3,R1
   \   0000005C   0xE3A00000         MOV      R0,#+0
   \   00000060   0xE3A01440         MOV      R1,#+1073741824
   \   00000064   0xE3811990         ORR      R1,R1,#0x240000
   \   00000068   0x........         BL       __aeabi_dmul
   \   0000006C   0x........         BL       __aeabi_d2iz
   \   00000070   0xE20000FF         AND      R0,R0,#0xFF
   \   00000074   0x........         BL       __aeabi_ui2d
   \   00000078   0xE1A04000         MOV      R4,R0
   \   0000007C   0xE1A05001         MOV      R5,R1
   \   00000080   0xE20660FF         AND      R6,R6,#0xFF
   \   00000084   0xE1A00006         MOV      R0,R6
   \   00000088   0x........         BL       __aeabi_ui2d
   \   0000008C   0xE1A02000         MOV      R2,R0
   \   00000090   0xE1A03001         MOV      R3,R1
   \   00000094   0xE3A00000         MOV      R0,#+0
   \   00000098   0xE3A01440         MOV      R1,#+1073741824
   \   0000009C   0xE3811990         ORR      R1,R1,#0x240000
   \   000000A0   0x........         BL       __aeabi_dmul
   \   000000A4   0xE1A02000         MOV      R2,R0
   \   000000A8   0xE1A03001         MOV      R3,R1
   \   000000AC   0xE1A00004         MOV      R0,R4
   \   000000B0   0xE1A01005         MOV      R1,R5
   \   000000B4   0x........         BL       __aeabi_dsub
   \   000000B8   0x........         BL       __aeabi_d2iz
   \   000000BC   0xE5C70008         STRB     R0,[R7, #+8]
   \   000000C0   0xEA000020         B        ??TakingTemperature_3
    276            }
    277            else
    278            {//@@@@@@@@@@@@@ @@@@@@@@@@@ @@ @@@@@@ @@@@@@
    279            TEMPERATURE.IntegerPart = (char) (- ttt);
    280            TEMPERATURE.FractionPart = (char) (-ttt*10.0) - (TEMPERATURE.IntegerPart*10.0);
   \                     ??TakingTemperature_2:
   \   000000C4   0xE2248480         EOR      R8,R4,#0x80000000
   \   000000C8   0xE1A00008         MOV      R0,R8
   \   000000CC   0x........         BL       __aeabi_f2d
   \   000000D0   0xE1A02000         MOV      R2,R0
   \   000000D4   0xE1A03001         MOV      R3,R1
   \   000000D8   0xE3A00000         MOV      R0,#+0
   \   000000DC   0xE3A01440         MOV      R1,#+1073741824
   \   000000E0   0xE3811990         ORR      R1,R1,#0x240000
   \   000000E4   0x........         BL       __aeabi_dmul
   \   000000E8   0x........         BL       __aeabi_d2iz
   \   000000EC   0xE20000FF         AND      R0,R0,#0xFF
   \   000000F0   0x........         BL       __aeabi_ui2d
   \   000000F4   0xE1A04000         MOV      R4,R0
   \   000000F8   0xE1A05001         MOV      R5,R1
   \   000000FC   0xE1A00008         MOV      R0,R8
   \   00000100   0x........         BL       __aeabi_f2iz
   \   00000104   0xE20000FF         AND      R0,R0,#0xFF
   \   00000108   0x........         BL       __aeabi_ui2d
   \   0000010C   0xE1A02000         MOV      R2,R0
   \   00000110   0xE1A03001         MOV      R3,R1
   \   00000114   0xE3A00000         MOV      R0,#+0
   \   00000118   0xE3A01440         MOV      R1,#+1073741824
   \   0000011C   0xE3811990         ORR      R1,R1,#0x240000
   \   00000120   0x........         BL       __aeabi_dmul
   \   00000124   0xE1A02000         MOV      R2,R0
   \   00000128   0xE1A03001         MOV      R3,R1
   \   0000012C   0xE1A00004         MOV      R0,R4
   \   00000130   0xE1A01005         MOV      R1,R5
   \   00000134   0x........         BL       __aeabi_dsub
   \   00000138   0x........         BL       __aeabi_d2iz
   \   0000013C   0xE5C70008         STRB     R0,[R7, #+8]
    281            TEMPERATURE.IntegerPart = 0xFF - (char) (ttt);
   \   00000140   0xE26600FF         RSB      R0,R6,#+255
   \   00000144   0xE5C70009         STRB     R0,[R7, #+9]
    282            }
    283          }//TakingTemperature END
   \                     ??TakingTemperature_3:
   \   00000148   0xE8BD41F0         POP      {R4-R8,LR}
   \   0000014C   0xE12FFF1E         BX       LR               ;; return
    284          /****************************************************************************/
    285          /****** @@@@@@ @@@@@@ @ UART0 ********/

   \                                 In section .text, align 4, keep-with-next
    286          void BYTEtoUART(unsigned char Charbyte)
    287          {
   \                     BYTEtoUART:
   \   00000000   0xE3A014E0         MOV      R1,#-536870912
   \   00000004   0xE3811CC0         ORR      R1,R1,#0xC000
    288              while (!(U0LSR & 0x020));
   \                     ??BYTEtoUART_0:
   \   00000008   0xE5D12014         LDRB     R2,[R1, #+20]
   \   0000000C   0xE3120020         TST      R2,#0x20
   \   00000010   0x0AFFFFFC         BEQ      ??BYTEtoUART_0
    289              U0THR= Charbyte;
   \   00000014   0xE5C10000         STRB     R0,[R1, #+0]
    290          }//BYTEtoUART end
   \   00000018   0xE12FFF1E         BX       LR               ;; return
   \   0000001C                      REQUIRE _A_U0LSR
   \   0000001C                      REQUIRE U0RBRTHR
    291          /****** @@@@@@ @@@@@@ @ UART0 ********/

   \                                 In section .text, align 4, keep-with-next
    292          void COMMANDtoUART(unsigned int kolbyte)
    293          {
   \                     COMMANDtoUART:
   \   00000000   0xE92D4038         PUSH     {R3-R5,LR}
   \   00000004   0xE1A04000         MOV      R4,R0
    294           int i;
    295          // STOPEINT0();
    296           for (i = -1; ++i < kolbyte;)
   \   00000008   0xE3E05000         MVN      R5,#+0
   \   0000000C   0xEA000002         B        ??COMMANDtoUART_0
    297               BYTEtoUART(COMMAND[i]);
   \                     ??COMMANDtoUART_1:
   \   00000010   0x........         LDR      R0,??DataTable19
   \   00000014   0xE7D00005         LDRB     R0,[R0, +R5]
   \   00000018   0x........         BL       BYTEtoUART
   \                     ??COMMANDtoUART_0:
   \   0000001C   0xE2855001         ADD      R5,R5,#+1
   \   00000020   0xE1550004         CMP      R5,R4
   \   00000024   0x3AFFFFF9         BCC      ??COMMANDtoUART_1
    298          // STARTEINT0();
    299          }//COMMANDtoUART
   \   00000028   0xE8BD4031         POP      {R0,R4,R5,LR}
   \   0000002C   0xE12FFF1E         BX       LR               ;; return
    300          
    301          
    302          //----------11.08.2009----------------------
    303          

   \                                 In section .text, align 4, keep-with-next
    304          void COMMANDtoUARTnew(unsigned int kolbyte)
    305          {
    306           int i;
    307           float Temp,Temp1;
    308           Temp1 = 10;
    309           Temp = 2;
    310          // STOPEINT0();
    311           for (i = -1; ++i < kolbyte;)
   \                     COMMANDtoUARTnew:
   \   00000000   0xE3E01000         MVN      R1,#+0
   \   00000004   0xE3A024E0         MOV      R2,#-536870912
   \   00000008   0xE3822CC0         ORR      R2,R2,#0xC000
   \   0000000C   0xEA000005         B        ??COMMANDtoUARTnew_0
    312           {
    313             Temp1 = Temp1 * Temp;
    314               //BYTEtoUART(COMMAND[i]);
    315             while (!(U0LSR & 0x020));
   \                     ??COMMANDtoUARTnew_1:
   \   00000010   0xE5D23014         LDRB     R3,[R2, #+20]
   \   00000014   0xE3130020         TST      R3,#0x20
   \   00000018   0x0AFFFFFC         BEQ      ??COMMANDtoUARTnew_1
    316              U0THR= COMMAND[i];
   \   0000001C   0x........         LDR      R3,??DataTable19
   \   00000020   0xE7D33001         LDRB     R3,[R3, +R1]
   \   00000024   0xE5C23000         STRB     R3,[R2, #+0]
    317           }
   \                     ??COMMANDtoUARTnew_0:
   \   00000028   0xE2811001         ADD      R1,R1,#+1
   \   0000002C   0xE1510000         CMP      R1,R0
   \   00000030   0x3AFFFFF6         BCC      ??COMMANDtoUARTnew_1
    318          // STARTEINT0();
    319          }//COMMANDtoUART
   \   00000034   0xE12FFF1E         BX       LR               ;; return
   \   00000038                      REQUIRE _A_U0LSR
   \   00000038                      REQUIRE U0RBRTHR
    320          
    321          
    322          /****************************************************************************/
    323          /****** @@@@@@@@@ 2-@ @@@@ @ COMMAND ********/

   \                                 In section .text, align 4, keep-with-next
    324          void toCOMMAND2byte(unsigned short nombyte,unsigned short datavalue)
    325          {
    326            COMMAND[nombyte] = datavalue >> 8;
   \                     toCOMMAND2byte:
   \   00000000   0x........         LDR      R3,??DataTable19
   \   00000004   0xE1A02001         MOV      R2,R1
   \   00000008   0xE1A02422         LSR      R2,R2,#+8
   \   0000000C   0xE1A0C000         MOV      R12,R0
   \   00000010   0xE7C3200C         STRB     R2,[R3, +R12]
    327            nombyte++;
    328            COMMAND[nombyte] = datavalue;
   \   00000014   0xE2800001         ADD      R0,R0,#+1
   \   00000018   0xE1A00800         LSL      R0,R0,#+16
   \   0000001C   0xE1A00820         LSR      R0,R0,#+16
   \   00000020   0xE7C31000         STRB     R1,[R3, +R0]
    329          }//toCOMMAND2byte
   \   00000024   0xE12FFF1E         BX       LR               ;; return
    330          /****************************************************************************/
    331          /****** @@@@@@@@@ 2-@ @@@@ @@ COMMAND @ short ********/

   \                                 In section .text, align 4, keep-with-next
    332          short toShort2COMMAND(nombyte)
    333          unsigned short nombyte;
    334          {
    335          return (COMMAND[nombyte] << 8 | COMMAND[nombyte+1]);
   \                     toShort2COMMAND:
   \   00000000   0x........         LDR      R1,??DataTable19
   \   00000004   0xE7D12000         LDRB     R2,[R1, +R0]
   \   00000008   0xE0810000         ADD      R0,R1,R0
   \   0000000C   0xE5D00001         LDRB     R0,[R0, #+1]
   \   00000010   0xE1800402         ORR      R0,R0,R2, LSL #+8
   \   00000014   0xE1A00800         LSL      R0,R0,#+16
   \   00000018   0xE1A00840         ASR      R0,R0,#+16
   \   0000001C   0xE12FFF1E         BX       LR               ;; return
    336          }//toCOMMAND2byte
    337          /****************************************************************************/
    338          /**** @@@@@ @@ @@@@@@@ @ @@@@@@@ *****/

   \                                 In section .text, align 4, keep-with-next
    339          void COMerr02(void)
    340          {
   \                     COMerr02:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
    341          COMerr(0x02); //@@@@@@@@@@@@ @@@@@ @@@@@@
   \   00000004   0xE3A00002         MOV      R0,#+2
   \   00000008   0x........         BL       COMerr
    342          FLAG.error = 1;
   \   0000000C   0x........         LDR      R0,??DataTable20
   \   00000010   0xE5901000         LDR      R1,[R0, #+0]
   \   00000014   0xE3811080         ORR      R1,R1,#0x80
   \   00000018   0xE5801000         STR      R1,[R0, #+0]
    343          }
   \   0000001C   0xE8BD4001         POP      {R0,LR}
   \   00000020   0xE12FFF1E         BX       LR               ;; return
    344          /********/

   \                                 In section .text, align 4, keep-with-next
    345          void COMerr( char kod)
    346          //unsigned char kod;
    347          {
   \                     COMerr:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
   \   00000004   0xE1A01000         MOV      R1,R0
    348          
    349            COMMAND[1] = COMMAND[1] | 0x80;
   \   00000008   0x........         LDR      R0,??DataTable24
   \   0000000C   0xE5D02001         LDRB     R2,[R0, #+1]
   \   00000010   0xE3822080         ORR      R2,R2,#0x80
   \   00000014   0xE5C02001         STRB     R2,[R0, #+1]
    350            COMMAND[2] = kod;
   \   00000018   0xE5C01002         STRB     R1,[R0, #+2]
    351          
    352            CRC16(COMMAND,3,0xFF,1);
   \   0000001C   0xE3A03001         MOV      R3,#+1
   \   00000020   0xE3A020FF         MOV      R2,#+255
   \   00000024   0xE3A01003         MOV      R1,#+3
   \   00000028   0x........         BL       CRC16
    353          
    354            COMMANDtoUART(5);
   \   0000002C   0xE3A00005         MOV      R0,#+5
   \   00000030   0x........         BL       COMMANDtoUART
    355          
    356            ClearCOMMAND ();  //@@@@@@@@ @@@@@@ @@@@@@@
   \   00000034   0xE8BD4001         POP      {R0,LR}
   \   00000038   0x........         B        ClearCOMMAND     ;; tailcall
    357          
    358          }
    359          /****************************************************************************/
    360          /********** STOP EINT0 **********/

   \                                 In section .text, align 4, keep-with-next
    361          void STOPEINT0(void)
    362          {
    363                      if (FLAG.SPECTR)
   \                     STOPEINT0:
   \   00000000   0x........         LDR      R0,??DataTable20
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE3A01001         MOV      R1,#+1
   \   0000000C   0xE1110220         TST      R1,R0, LSR #+4
   \   00000010   0x........         LDR      R0,??DataTable24_1  ;; 0xe01fc140
   \   00000014   0x1A000002         BNE      ??STOPEINT0_0
   \   00000018   0xE12FFF1E         BX       LR
    364                                      { while (EXTINT & 1)
    365                                              EXTINT = 0x1;             //@@@@@ @@@@@@@@@@ EINT0
   \                     ??STOPEINT0_1:
   \   0000001C   0xE3A01001         MOV      R1,#+1
   \   00000020   0xE5801000         STR      R1,[R0, #+0]
   \                     ??STOPEINT0_0:
   \   00000024   0xE5901000         LDR      R1,[R0, #+0]
   \   00000028   0xE3110001         TST      R1,#0x1
   \   0000002C   0x1AFFFFFA         BNE      ??STOPEINT0_1
    366                                      T1TCR = 0;         //@@@@@@@@@@ @@@@@@@ TMR1 - @@@@@@@ @@@@@
   \   00000030   0xE3A00000         MOV      R0,#+0
   \   00000034   0xE3A0124E         MOV      R1,#-536870908
   \   00000038   0xE3811C80         ORR      R1,R1,#0x8000
   \   0000003C   0xE5810000         STR      R0,[R1, #+0]
    367                                      VICIntEnClear = VICIntEnClear | INTERENT0;  //@@@@@@ @@@@@@@@@
   \   00000040   0xE3E000EB         MVN      R0,#+235
   \   00000044   0xE3C00EF0         BIC      R0,R0,#0xF00
   \   00000048   0xE5901000         LDR      R1,[R0, #+0]
   \   0000004C   0xE3811C40         ORR      R1,R1,#0x4000
   \   00000050   0xE5801000         STR      R1,[R0, #+0]
    368                                      }
    369          }//STOPEINT0
   \   00000054   0xE12FFF1E         BX       LR               ;; return
   \   00000058                      REQUIRE _A_EXTINT
   \   00000058                      REQUIRE _A_T1TCR
   \   00000058                      REQUIRE _A_VICIntEnClear
    370          /****************************************************************************/
    371          /********** START EINT0 **********/

   \                                 In section .text, align 4, keep-with-next
    372          void STARTEINT0(void)
    373          {
    374                      if (FLAG.SPECTR)
   \                     STARTEINT0:
   \   00000000   0x........         LDR      R0,??DataTable20
   \   00000004   0xE5900000         LDR      R0,[R0, #+0]
   \   00000008   0xE3A01001         MOV      R1,#+1
   \   0000000C   0xE1110220         TST      R1,R0, LSR #+4
   \   00000010   0x0A000008         BEQ      ??STARTEINT0_0
    375                      { VICIntEnable =VICIntEnable | INTERENT0; //@@@@@@@@@@ @@@@@@@@@
   \   00000014   0xE3E000EF         MVN      R0,#+239
   \   00000018   0xE3C00EF0         BIC      R0,R0,#0xF00
   \   0000001C   0xE5901000         LDR      R1,[R0, #+0]
   \   00000020   0xE3811C40         ORR      R1,R1,#0x4000
   \   00000024   0xE5801000         STR      R1,[R0, #+0]
    376                        T1TCR = 1;         //@@@@@@@@@ @@@@@@@ TMR1
   \   00000028   0xE3A00001         MOV      R0,#+1
   \   0000002C   0xE3A0124E         MOV      R1,#-536870908
   \   00000030   0xE3811C80         ORR      R1,R1,#0x8000
   \   00000034   0xE5810000         STR      R0,[R1, #+0]
    377                       }
    378          }//STARTEINT0
   \                     ??STARTEINT0_0:
   \   00000038   0xE12FFF1E         BX       LR               ;; return
   \   0000003C                      REQUIRE _A_VICIntEnable
   \   0000003C                      REQUIRE _A_T1TCR
    379          /****************************************************************************/
    380          /************COM3  @@@@@@@ @@@@@@@@@ @@@@@@@@@ @@@@@@@@@@ **********/

   \                                 In section .text, align 4, keep-with-next
    381          void COM3(void)
    382          { short adr,kol;
   \                     COM3:
   \   00000000   0xE92D407C         PUSH     {R2-R6,LR}
    383            float InterTemp;
    384                adr = COMMAND[2] << 8 | COMMAND[3]; //@@@@@ @ @@@@@@@@@ @@@@@@@ @@ 0...4
   \   00000004   0x........         LDR      R4,??DataTable19
   \   00000008   0xE5D40002         LDRB     R0,[R4, #+2]
   \   0000000C   0xE5D41003         LDRB     R1,[R4, #+3]
   \   00000010   0xE1811400         ORR      R1,R1,R0, LSL #+8
   \   00000014   0xE1A01801         LSL      R1,R1,#+16
   \   00000018   0xE1A01841         ASR      R1,R1,#+16
    385                kol = COMMAND[4] << 8 | COMMAND[5]; //@@@-@@ @@@ @@@@@@@
   \   0000001C   0xE5D40004         LDRB     R0,[R4, #+4]
   \   00000020   0xE5D42005         LDRB     R2,[R4, #+5]
   \   00000024   0xE1820400         ORR      R0,R2,R0, LSL #+8
   \   00000028   0xE1A00800         LSL      R0,R0,#+16
   \   0000002C   0xE1A00840         ASR      R0,R0,#+16
    386                 //@@@@@@@@ @@@@@ @@@@@@@@@ @@@@@@@ 4-@@@@@(2 @@@@@@@@) @@@@@@@@@ @@ 2 @@@@@(1 @@@@@@@)
    387                 //@@@@@@@@ @@@-@@ @@@@@@@@@ @@@@@@@
    388                if (((adr == 0) && ((kol == 2) || (kol == 1))) || ((adr >0) && (kol == 1)) || ((adr==5) && (kol == 2)))
   \   00000030   0xE3510000         CMP      R1,#+0
   \   00000034   0x1A000003         BNE      ??COM3_1
   \   00000038   0xE3500002         CMP      R0,#+2
   \   0000003C   0x0A000009         BEQ      ??COM3_2
   \   00000040   0xE3500001         CMP      R0,#+1
   \   00000044   0x0A000007         BEQ      ??COM3_2
   \                     ??COM3_1:
   \   00000048   0xE3510000         CMP      R1,#+0
   \   0000004C   0xDA000001         BLE      ??COM3_3
   \   00000050   0xE3500001         CMP      R0,#+1
   \   00000054   0x0A000003         BEQ      ??COM3_2
   \                     ??COM3_3:
   \   00000058   0xE3510005         CMP      R1,#+5
   \   0000005C   0x1A000062         BNE      ??COM3_4
   \   00000060   0xE3500002         CMP      R0,#+2
   \   00000064   0x1A000060         BNE      ??COM3_4
    389                    {//@@@@@@ @@@@@@ @@@@@@@@ @@@@@@@, @@@@@@@@@@@@ @@@@@@
    390                      COMMAND[2] = kol << 1; //@@@-@@ @@@@ @@@@@@ @@@@@@ = @@@-@@ @@@ * 2
   \                     ??COM3_2:
   \   00000068   0xE1A02000         MOV      R2,R0
   \   0000006C   0xE1A02082         LSL      R2,R2,#+1
   \   00000070   0xE5C42002         STRB     R2,[R4, #+2]
    391                      FLAG.error = 0;  //@@@@ @@@@@@@@@ @@@@@@
   \   00000074   0x........         LDR      R5,??DataTable20
   \   00000078   0xE5952000         LDR      R2,[R5, #+0]
   \   0000007C   0xE3C22080         BIC      R2,R2,#0x80
   \   00000080   0xE5852000         STR      R2,[R5, #+0]
    392          
    393                      switch (adr){
   \   00000084   0xE3510005         CMP      R1,#+5
   \   00000088   0x8A000048         BHI      ??COM3_5
   \   0000008C   0xE7DF2001         LDRB     R2,[PC, R1]
   \   00000090   0xE08FF102         ADD      PC,PC,R2, LSL #+2
   \                     ??COM3_0:
   \   00000094   0x01 0x46          DC8      0x1,0x46,0x20,0x25
   \              0x20 0x25    
   \   00000098   0x2A 0x2F          DC8      0x2A,0x2F,0x0,0x0
   \              0x00 0x00    
    394                      case 0x00: if (flagTIME2 == 0)
   \                     ??COM3_6:
   \   0000009C   0x........         LDR      R1,??DataTable24_2
   \   000000A0   0xE5911000         LDR      R1,[R1, #+0]
   \   000000A4   0x........         LDR      R6,??DataTable18
   \   000000A8   0xE5D6200A         LDRB     R2,[R6, #+10]
   \   000000AC   0xE3520000         CMP      R2,#+0
   \   000000B0   0x1A000011         BNE      ??COM3_7
    395                                {
    396                                 COMMAND[3] = TIMEIZMsek >> 24;
   \   000000B4   0xE1A02C21         LSR      R2,R1,#+24
   \   000000B8   0xE5C42003         STRB     R2,[R4, #+3]
    397                                 COMMAND[4] = TIMEIZMsek >> 16;  //@ @@@@@@@@ 2 @@@@@@@
   \   000000BC   0xE1A02821         LSR      R2,R1,#+16
   \   000000C0   0xE5C42004         STRB     R2,[R4, #+4]
    398                                 if (kol == 2)
   \   000000C4   0xE3500002         CMP      R0,#+2
   \   000000C8   0x1A000006         BNE      ??COM3_8
    399                                     {
    400                                      toCOMMAND2byte(5,TIMEIZMsek);  //@@@@@@@@ @@@@@ @@@@@@@@@@ @@@@@@@ 4@@@@@
   \   000000CC   0xE1A01801         LSL      R1,R1,#+16
   \   000000D0   0xE1A01821         LSR      R1,R1,#+16
   \   000000D4   0xE3A00005         MOV      R0,#+5
   \   000000D8   0x........         BL       toCOMMAND2byte
    401                                      TimeByte= 4;
   \   000000DC   0xE3A00004         MOV      R0,#+4
   \   000000E0   0xE5C6000B         STRB     R0,[R6, #+11]
   \   000000E4   0xEA000032         B        ??COM3_9
    402                                      }
    403                                    else
    404                                    {
    405                                      flagTIME2 = 1; //@@@@@@ @@ 2 @@@@@
   \                     ??COM3_8:
   \   000000E8   0xE3A00001         MOV      R0,#+1
   \   000000EC   0xE5C6000A         STRB     R0,[R6, #+10]
    406                                      TimeByte= 2;
   \   000000F0   0xE3A00002         MOV      R0,#+2
   \   000000F4   0xE5C6000B         STRB     R0,[R6, #+11]
   \   000000F8   0xEA00002D         B        ??COM3_9
    407                                    }
    408                                }
    409                                else
    410                                {
    411                                 toCOMMAND2byte(3,TIMEIZMsek);  //@@@@@@@@ @@@@@ @@@@@@@@@@ @@@@@@@ 2 @@@@@@@
   \                     ??COM3_7:
   \   000000FC   0xE1A01801         LSL      R1,R1,#+16
   \   00000100   0xE1A01821         LSR      R1,R1,#+16
   \   00000104   0xE3A00003         MOV      R0,#+3
   \   00000108   0x........         BL       toCOMMAND2byte
    412                                 flagTIME2 = 0;
   \   0000010C   0xE3A00000         MOV      R0,#+0
   \   00000110   0xE5C6000A         STRB     R0,[R6, #+10]
   \   00000114   0xEA000026         B        ??COM3_9
    413                                }
    414                                 break;
    415                      case 0x02:  toCOMMAND2byte(3,KODADC);     //@@@@@@@@@@@ @@@@@@@@
   \                     ??COM3_10:
   \   00000118   0x........         LDR      R0,??DataTable24_3
   \   0000011C   0xE1D010B0         LDRH     R1,[R0, #+0]
   \   00000120   0xE3A00003         MOV      R0,#+3
   \   00000124   0x........         BL       toCOMMAND2byte
    416                                  break;
   \   00000128   0xEA000021         B        ??COM3_9
    417                      case 0x03:  toCOMMAND2byte(3,MINPOROG);   //@@@@@@ @@@@@
   \                     ??COM3_11:
   \   0000012C   0x........         LDR      R0,??DataTable24_4
   \   00000130   0xE1D010B0         LDRH     R1,[R0, #+0]
   \   00000134   0xE3A00003         MOV      R0,#+3
   \   00000138   0x........         BL       toCOMMAND2byte
    418                                  break;
   \   0000013C   0xEA00001C         B        ??COM3_9
    419                      case 0x04:  toCOMMAND2byte(3,MAXPOROG);   //@@@@@@@ @@@@@
   \                     ??COM3_12:
   \   00000140   0x........         LDR      R0,??DataTable24_5
   \   00000144   0xE1D010B0         LDRH     R1,[R0, #+0]
   \   00000148   0xE3A00003         MOV      R0,#+3
   \   0000014C   0x........         BL       toCOMMAND2byte
    420                                  break;
   \   00000150   0xEA000017         B        ??COM3_9
    421                      case 0x05:
    422          
    423          
    424          
    425                                  COMMAND[2] = 4;               //@@@@@@@@ @@@@@@@@@ @@@@@@@@@@@ @@@@.
   \                     ??COM3_13:
   \   00000154   0xE3A00004         MOV      R0,#+4
   \   00000158   0xE5C40002         STRB     R0,[R4, #+2]
    426                                  InterTemp = TIMER0_INTERVAL / 60.0 / 1000.0;
   \   0000015C   0x........         LDR      R0,??DataTable24_6
   \   00000160   0xE5900000         LDR      R0,[R0, #+0]
   \   00000164   0x........         BL       __aeabi_f2d
   \   00000168   0xE3A02000         MOV      R2,#+0
   \   0000016C   0xE3A03440         MOV      R3,#+1073741824
   \   00000170   0xE383384E         ORR      R3,R3,#0x4E0000
   \   00000174   0x........         BL       __aeabi_ddiv
   \   00000178   0xE3A02000         MOV      R2,#+0
   \   0000017C   0x........         LDR      R3,??DataTable26  ;; 0x408f4000
   \   00000180   0x........         BL       __aeabi_ddiv
   \   00000184   0x........         BL       __aeabi_d2f
   \   00000188   0xE58D0000         STR      R0,[SP, #+0]
    427                                  COMMAND[6] =  *(unsigned char*)  &  InterTemp;
   \   0000018C   0xE5DD0000         LDRB     R0,[SP, #+0]
   \   00000190   0xE5C40006         STRB     R0,[R4, #+6]
    428                                  COMMAND[5] =  *((unsigned char*) &  InterTemp+1);
   \   00000194   0xE5DD0001         LDRB     R0,[SP, #+1]
   \   00000198   0xE5C40005         STRB     R0,[R4, #+5]
    429                                  COMMAND[4] =  *((unsigned char*) &  InterTemp+2);
   \   0000019C   0xE5DD0002         LDRB     R0,[SP, #+2]
   \   000001A0   0xE5C40004         STRB     R0,[R4, #+4]
    430                                  COMMAND[3] =  *((unsigned char*) &  InterTemp+3);
   \   000001A4   0xE5DD0003         LDRB     R0,[SP, #+3]
   \   000001A8   0xE5C40003         STRB     R0,[R4, #+3]
    431          
    432          
    433                                  break;
   \   000001AC   0xEA000000         B        ??COM3_9
    434                      default:    COMerr02();
   \                     ??COM3_5:
   \   000001B0   0x........         BL       COMerr02
    435                                  break; //@@@ @@@>5 @@@ =1 - @@@@@@@@@@@@ @@@@@ @@@@@@
    436                      }//swith adr
    437                    if (!FLAG.error)
   \                     ??COM3_9:
   \   000001B4   0xE5950000         LDR      R0,[R5, #+0]
   \   000001B8   0xE3A01001         MOV      R1,#+1
   \   000001BC   0xE11103A0         TST      R1,R0, LSR #+7
   \   000001C0   0x1A00000C         BNE      ??COM3_14
    438                        {// @@@@@
    439                            kol = COMMAND[2]+3;
   \   000001C4   0xE5D40002         LDRB     R0,[R4, #+2]
   \   000001C8   0xE2805003         ADD      R5,R0,#+3
    440                            CRC16(COMMAND,kol,0xFF,1);
   \   000001CC   0xE1A03001         MOV      R3,R1
   \   000001D0   0xE3A020FF         MOV      R2,#+255
   \   000001D4   0xE1A01005         MOV      R1,R5
   \   000001D8   0xE1A00004         MOV      R0,R4
   \   000001DC   0x........         BL       CRC16
    441                            kol+=2;
    442                            COMMANDtoUART(kol);
   \   000001E0   0xE2850002         ADD      R0,R5,#+2
   \   000001E4   0xE8BD4076         POP      {R1,R2,R4-R6,LR}
   \   000001E8   0x........         B        COMMANDtoUART    ;; tailcall
    443                        }//!FLAG.error
    444                    }//if adr | kol
    445                              else //if adr | kol
    446                              COMerr(0x03); //@@@@@@ @@@-@@ @@@@@@@@@ - @@@@@@@@@@@@ @@@@@@@@ @@@@@@
   \                     ??COM3_4:
   \   000001EC   0xE3A00003         MOV      R0,#+3
   \   000001F0   0xE8BD4076         POP      {R1,R2,R4-R6,LR}
   \   000001F4   0x........         B        COMerr           ;; tailcall
    447          }//END COM3
   \                     ??COM3_14:
   \   000001F8   0xE8BD4073         POP      {R0,R1,R4-R6,LR}
   \   000001FC   0xE12FFF1E         BX       LR               ;; return
    448          /****************************************************************************/
    449          /************* COM4 @@@@@@@ @@@@@@@@@ @@@@@@@@@ @@@@@@ **************/

   \                                 In section .text, align 4, keep-with-next
    450          void COM4(void)
    451          { short adr,kol;
   \                     COM4:
   \   00000000   0xE92D40F8         PUSH     {R3-R7,LR}
    452            int LivingTime;
    453                adr = COMMAND[2] << 8 | COMMAND[3]; //@@@@@ @ @@@@@@@@@ @@@@@@@ @@ 0...4
   \   00000004   0x........         LDR      R4,??DataTable19
   \   00000008   0xE5D40002         LDRB     R0,[R4, #+2]
   \   0000000C   0xE5D41003         LDRB     R1,[R4, #+3]
   \   00000010   0xE1811400         ORR      R1,R1,R0, LSL #+8
   \   00000014   0xE1A01801         LSL      R1,R1,#+16
   \   00000018   0xE1A01841         ASR      R1,R1,#+16
    454                kol = COMMAND[4] << 8 | COMMAND[5]; //@@@-@@ @@@ @@@@@@@
   \   0000001C   0xE5D40004         LDRB     R0,[R4, #+4]
   \   00000020   0xE5D42005         LDRB     R2,[R4, #+5]
   \   00000024   0xE1825400         ORR      R5,R2,R0, LSL #+8
   \   00000028   0xE1A05805         LSL      R5,R5,#+16
   \   0000002C   0xE1A05845         ASR      R5,R5,#+16
    455                 //@@@@@ @@@@@ 4-@@@@@(2 @@@@@@@@) @@@@@@@@@ @@ 2 @@@@@(1 @@@@@@@)
    456                 //@@@@@@@@ @@@-@@ @@@@@@@@@ @@@@@@@
    457                if (((adr == 0) && ((kol == 2)|| (kol == 1)) || ((adr ==2) && (kol == 1))) || ((adr == 3) && (kol == 2)))
   \   00000030   0xE3510000         CMP      R1,#+0
   \   00000034   0x1A000003         BNE      ??COM4_0
   \   00000038   0xE3550002         CMP      R5,#+2
   \   0000003C   0x0A000009         BEQ      ??COM4_1
   \   00000040   0xE3550001         CMP      R5,#+1
   \   00000044   0x0A000007         BEQ      ??COM4_1
   \                     ??COM4_0:
   \   00000048   0xE3510002         CMP      R1,#+2
   \   0000004C   0x1A000001         BNE      ??COM4_2
   \   00000050   0xE3550001         CMP      R5,#+1
   \   00000054   0x0A000003         BEQ      ??COM4_1
   \                     ??COM4_2:
   \   00000058   0xE3510003         CMP      R1,#+3
   \   0000005C   0x1A000059         BNE      ??COM4_3
   \   00000060   0xE3550002         CMP      R5,#+2
   \   00000064   0x1A000057         BNE      ??COM4_3
    458                    {//@@@@@@ @@@@@@ @@@@@@@@ @@@@@@@, @@@@@@@@@@@@ @@@@@@
    459                      COMMAND[2] = kol << 1; //@@@-@@ @@@@ @@@@@@ @@@@@@ = @@@-@@ @@@ * 2
   \                     ??COM4_1:
   \   00000068   0xE1A00005         MOV      R0,R5
   \   0000006C   0xE1A00080         LSL      R0,R0,#+1
   \   00000070   0xE5C40002         STRB     R0,[R4, #+2]
    460                      FLAG.error = 0;  //@@@@ @@@@@@@@@ @@@@@@
   \   00000074   0x........         LDR      R6,??DataTable20
   \   00000078   0xE5960000         LDR      R0,[R6, #+0]
   \   0000007C   0xE3C00080         BIC      R0,R0,#0x80
   \   00000080   0xE5860000         STR      R0,[R6, #+0]
    461                      //LivingTime = T1TC;  //@@@@@ @@@@@ - mSek
    462                      //---25.04.2011-----------
    463          
    464                      if( FLAG.SPECTR )
   \   00000084   0xE3A02001         MOV      R2,#+1
   \   00000088   0xE1120220         TST      R2,R0, LSR #+4
   \   0000008C   0x0A000003         BEQ      ??COM4_4
    465                      {
    466                        LivingTime = T1TC;  //@@@@@ @@@@@ - mSek
   \   00000090   0xE3A0028E         MOV      R0,#-536870904
   \   00000094   0xE3800C80         ORR      R0,R0,#0x8000
   \   00000098   0xE5900000         LDR      R0,[R0, #+0]
   \   0000009C   0xEA000001         B        ??COM4_5
    467          
    468                      }
    469                      else
    470                      {
    471                        LivingTime = T1TC_stop;
   \                     ??COM4_4:
   \   000000A0   0x........         LDR      R0,??DataTable26_1
   \   000000A4   0xE5900000         LDR      R0,[R0, #+0]
    472                      }
    473          
    474                      //-----------------------------------------
    475          
    476                      switch (adr){
   \                     ??COM4_5:
   \   000000A8   0xE3510000         CMP      R1,#+0
   \   000000AC   0x0A000004         BEQ      ??COM4_6
   \   000000B0   0xE3510002         CMP      R1,#+2
   \   000000B4   0x0A000023         BEQ      ??COM4_7
   \   000000B8   0xE3510003         CMP      R1,#+3
   \   000000BC   0x0A000002         BEQ      ??COM4_8
   \   000000C0   0xEA000027         B        ??COM4_9
    477                      case 0x00:  LivingTime/=1000; //@@@@@ @@@@@@
   \                     ??COM4_6:
   \   000000C4   0xE3A01FFA         MOV      R1,#+1000
   \   000000C8   0x........         BL       __aeabi_idiv
    478                      case 0x03:
    479                                  if (flagTIME2 == 0)
   \                     ??COM4_8:
   \   000000CC   0x........         LDR      R7,??DataTable18
   \   000000D0   0xE5D7100A         LDRB     R1,[R7, #+10]
   \   000000D4   0xE3510000         CMP      R1,#+0
   \   000000D8   0x1A000012         BNE      ??COM4_10
    480                                  {
    481                                  COMMAND[3] = LivingTime >> 24;
   \   000000DC   0xE1A01C40         ASR      R1,R0,#+24
   \   000000E0   0xE5C41003         STRB     R1,[R4, #+3]
    482                                  COMMAND[4] = LivingTime >> 16;  //1-@ @@ @@@ @@@@@
   \   000000E4   0xE1A01840         ASR      R1,R0,#+16
   \   000000E8   0xE5C41004         STRB     R1,[R4, #+4]
    483                                  if (kol == 2)
   \   000000EC   0xE3550002         CMP      R5,#+2
   \   000000F0   0x1A000007         BNE      ??COM4_11
    484                                  {
    485                                    toCOMMAND2byte(5,LivingTime);   //@ @@@@@@ -  mSek 4 @@@@@
   \   000000F4   0xE1A01000         MOV      R1,R0
   \   000000F8   0xE1A01801         LSL      R1,R1,#+16
   \   000000FC   0xE1A01821         LSR      R1,R1,#+16
   \   00000100   0xE3A00005         MOV      R0,#+5
   \   00000104   0x........         BL       toCOMMAND2byte
    486                                    TimeByte =4;
   \   00000108   0xE3A00004         MOV      R0,#+4
   \   0000010C   0xE5C7000B         STRB     R0,[R7, #+11]
   \   00000110   0xEA000014         B        ??COM4_12
    487                                  }
    488                                    else
    489                                    {
    490                                      flagTIME2 = 1; //@@@@@@ @@ 2 @@@@@
   \                     ??COM4_11:
   \   00000114   0xE3A00001         MOV      R0,#+1
   \   00000118   0xE5C7000A         STRB     R0,[R7, #+10]
    491                                      TimeByte =2;
   \   0000011C   0xE3A00002         MOV      R0,#+2
   \   00000120   0xE5C7000B         STRB     R0,[R7, #+11]
   \   00000124   0xEA00000F         B        ??COM4_12
    492                                    }
    493                                }
    494                                else
    495                                {
    496                                 toCOMMAND2byte(3,LivingTime);  //@@@@@@@@ @@@@@ @@@@@@@@@@ @@@@@@@ 2 @@@@@@@
   \                     ??COM4_10:
   \   00000128   0xE1A01000         MOV      R1,R0
   \   0000012C   0xE1A01801         LSL      R1,R1,#+16
   \   00000130   0xE1A01821         LSR      R1,R1,#+16
   \   00000134   0xE3A00003         MOV      R0,#+3
   \   00000138   0x........         BL       toCOMMAND2byte
    497                                 flagTIME2 = 0;
   \   0000013C   0xE3A00000         MOV      R0,#+0
   \   00000140   0xE5C7000A         STRB     R0,[R7, #+10]
   \   00000144   0xEA000007         B        ??COM4_12
    498                                }
    499                                  break;
    500                      case 0x02:  TakingTemperature();            //@@@@@@@ @@@@@@@@ @@@@@@@@@@@
   \                     ??COM4_7:
   \   00000148   0x........         BL       TakingTemperature
    501                                  COMMAND[3] = TEMPERATURE.IntegerPart;
   \   0000014C   0x........         LDR      R0,??DataTable18
   \   00000150   0xE5D01009         LDRB     R1,[R0, #+9]
   \   00000154   0xE5C41003         STRB     R1,[R4, #+3]
    502                                  COMMAND[4] = TEMPERATURE.FractionPart;
   \   00000158   0xE5D00008         LDRB     R0,[R0, #+8]
   \   0000015C   0xE5C40004         STRB     R0,[R4, #+4]
    503          
    504          
    505                                  break;
   \   00000160   0xEA000000         B        ??COM4_12
    506                      default:    COMerr02();
   \                     ??COM4_9:
   \   00000164   0x........         BL       COMerr02
    507                                  break; //@@@ @@@>3 @@@ =1 - @@@@@@@@@@@@ @@@@@ @@@@@@
    508                      }//swith adr
    509                    if (!FLAG.error)
   \                     ??COM4_12:
   \   00000168   0xE5960000         LDR      R0,[R6, #+0]
   \   0000016C   0xE3A01001         MOV      R1,#+1
   \   00000170   0xE11103A0         TST      R1,R0, LSR #+7
   \   00000174   0x1A000016         BNE      ??COM4_13
    510                        {// @@@@@
    511                            kol = COMMAND[2]+3;
   \   00000178   0xE5D40002         LDRB     R0,[R4, #+2]
   \   0000017C   0xE2805003         ADD      R5,R0,#+3
    512                            CRC16(COMMAND,kol,0xFF,1);
   \   00000180   0xE1A03001         MOV      R3,R1
   \   00000184   0xE3A020FF         MOV      R2,#+255
   \   00000188   0xE1A01005         MOV      R1,R5
   \   0000018C   0xE1A00004         MOV      R0,R4
   \   00000190   0x........         BL       CRC16
    513                            kol+=2;
    514                            COMMANDtoUART(kol);
   \   00000194   0xE2850002         ADD      R0,R5,#+2
   \   00000198   0x........         BL       COMMANDtoUART
    515                            //======== @@@ @@@@@@@@@@@@ WDT (14.12.2015) ==============
    516          
    517                                  ++Test_WDT_cnt;
   \   0000019C   0x........         LDR      R0,??DataTable29
   \   000001A0   0xE5D01000         LDRB     R1,[R0, #+0]
   \   000001A4   0xE2811001         ADD      R1,R1,#+1
   \   000001A8   0xE5C01000         STRB     R1,[R0, #+0]
    518                                  if( Test_WDT_cnt > 10)
   \   000001AC   0xE20110FF         AND      R1,R1,#0xFF
   \   000001B0   0xE351000B         CMP      R1,#+11
   \   000001B4   0xBA000006         BLT      ??COM4_13
    519                                  {
    520                                     __disable_interrupt();
   \   000001B8   0xE10F0000         MRS      R0,CPSR
   \   000001BC   0xE38000C0         ORR      R0,R0,#0xC0
   \   000001C0   0xE121F000         MSR      CPSR_c,R0
    521                                    while(1)
   \                     ??COM4_14:
   \   000001C4   0xEAFFFFFE         B        ??COM4_14
    522                                    {
    523                                    }
    524                                  }
    525          
    526                                  //======== @@@ @@@@@@@@@@@@ WDT (14.12.2015) ==============
    527                        }//!FLAG.error
    528                     }//if adr | kol
    529                              else //if adr | kol
    530                              COMerr(0x03); //@@@@@@ @@@-@@ @@@@@@@@@ - @@@@@@@@@@@@ @@@@@@@@ @@@@@@
   \                     ??COM4_3:
   \   000001C8   0xE3A00003         MOV      R0,#+3
   \   000001CC   0xE8BD40F2         POP      {R1,R4-R7,LR}
   \   000001D0   0x........         B        COMerr           ;; tailcall
    531          }//END COM4
   \                     ??COM4_13:
   \   000001D4   0xE8BD40F1         POP      {R0,R4-R7,LR}
   \   000001D8   0xE12FFF1E         BX       LR               ;; return
   \   000001DC                      REQUIRE T1TC
    532          /****************************************************************************/
    533          /******* COM5  @@@@@@ @@@@@@@@@@@ @@@@@@ **************/

   \                                 In section .text, align 4, keep-with-next
    534          void COM5(void)
    535          { int i;
   \                     COM5:
   \   00000000   0xE92D4070         PUSH     {R4-R6,LR}
    536            if ( (COMMAND[2] == 0) && (COMMAND[5]==0) && ((COMMAND[4] == 0xFF) || (COMMAND[4] == 0)))
   \   00000004   0x........         LDR      R4,??DataTable19
   \   00000008   0xE5D40002         LDRB     R0,[R4, #+2]
   \   0000000C   0xE3500000         CMP      R0,#+0
   \   00000010   0x1A00004B         BNE      ??COM5_1
   \   00000014   0xE5D40005         LDRB     R0,[R4, #+5]
   \   00000018   0xE3500000         CMP      R0,#+0
   \   0000001C   0x1A000048         BNE      ??COM5_1
   \   00000020   0xE5D45004         LDRB     R5,[R4, #+4]
   \   00000024   0xE1A00005         MOV      R0,R5
   \   00000028   0xE35000FF         CMP      R0,#+255
   \   0000002C   0x0A000001         BEQ      ??COM5_2
   \   00000030   0xE3550000         CMP      R5,#+0
   \   00000034   0x1A000042         BNE      ??COM5_1
    537              {//@@@@@@ @@@@@@ @@@@@@@@ @@@@@@@, @@@@@ - @@@@@@@@@@ @@@@@@@
    538               STOPEINT0();    //@@@@@@@@@@ @@@@@@@@@
   \                     ??COM5_2:
   \   00000038   0x........         BL       STOPEINT0
    539               switch (COMMAND[3]){
   \   0000003C   0xE5D40003         LDRB     R0,[R4, #+3]
   \   00000040   0xE3500007         CMP      R0,#+7
   \   00000044   0x8A000034         BHI      ??COM5_3
   \   00000048   0xE7DF1000         LDRB     R1,[PC, R0]
   \   0000004C   0xE08FF101         ADD      PC,PC,R1, LSL #+2
   \                     ??COM5_0:
   \   00000050   0x01 0x07          DC8      0x1,0x7,0x13,0x32
   \              0x13 0x32    
   \   00000054   0x32 0x21          DC8      0x32,0x21,0x32,0x2A
   \              0x32 0x2A    
    540                      case 0x00:
    541                                  T1TC_temp = 0;
   \                     ??COM5_4:
   \   00000058   0xE3A00000         MOV      R0,#+0
   \   0000005C   0x........         LDR      R1,??DataTable29_1
   \   00000060   0xE5810000         STR      R0,[R1, #+0]
    542                                  ClearSPECTR();  //@@@@@@@@ @@@@@@ @@@@@@@@@@ @@@@@@@
   \   00000064   0x........         BL       ClearSPECTR
    543                                  InitialiseTimer1(); // @ @@@@@@ @@@@@@ @@@@@@@
   \   00000068   0x........         BL       InitialiseTimer1
    544                                  break;
   \   0000006C   0xEA00002B         B        ??COM5_5
    545                      case 0x01:  if (COMMAND[4]==0x0)
   \                     ??COM5_6:
   \   00000070   0x........         LDR      R4,??DataTable20
   \   00000074   0xE5946000         LDR      R6,[R4, #+0]
   \   00000078   0xE3550000         CMP      R5,#+0
   \   0000007C   0x1A000003         BNE      ??COM5_7
    546                                      {
    547                                        STOPEINT0();
   \   00000080   0x........         BL       STOPEINT0
    548                                        FLAG.SPECTR = 0; //@@@@@@@@@ @@@@@@@@@@ @@@@@@@
   \   00000084   0xE3C60010         BIC      R0,R6,#0x10
   \   00000088   0xE5840000         STR      R0,[R4, #+0]
   \   0000008C   0xEA000023         B        ??COM5_5
    549                                       }
    550                                   else
    551                                      {
    552                                        //--@@@@@@@@@@@@ @@@@@@@ 14.10.2011
    553                                        //if( FL_test == 1 )
    554                                          //-------------------------------
    555                                          FLAG.SPECTR = 1;    //@@@@@@@@@ @@@@@@@@@@ @@@@@@@
   \                     ??COM5_7:
   \   00000090   0xE3860010         ORR      R0,R6,#0x10
   \   00000094   0xE5840000         STR      R0,[R4, #+0]
    556                                        STARTEINT0();
   \   00000098   0x........         BL       STARTEINT0
   \   0000009C   0xEA00001F         B        ??COM5_5
    557                                        //--@@@@@@@@@@@@ @@@@@@@ 14.10.2011
    558                                        //if( FL_test == 0 )
    559                                          // FLAG.SPECTR = 0;    //@@@@@@@@@ @@@@@@@@@@ @@@@@@@
    560                                          //-------------------------------
    561          
    562                                      }
    563                                  break;
    564                      case 0x02:  //for (i=1024; --i>=0;)   //@@@@@@ @@@ @@@@@@@ @ @@@@@@@@ @@@
    565                                  //      BUFFSPECTR[i] = SPECTR[i];
    566                                  for ( i=1024; --i>=0; )   //@@@@@@ @@@ @@@@@@@ @ @@@@@@@@ @@@
   \                     ??COM5_8:
   \   000000A0   0xE3A00E40         MOV      R0,#+1024
   \                     ??COM5_9:
   \   000000A4   0xE2500001         SUBS     R0,R0,#+1
   \   000000A8   0x4A00001C         BMI      ??COM5_5
    567                                      {
    568                                        //BUFFSPECTR[i] = SPECTR[i];
    569                                        BUFFSPECTR[i*4] = *((char*)&SPECTR[i] + 3);
   \   000000AC   0x........         LDR      R1,??DataTable19_2
   \   000000B0   0xE0811100         ADD      R1,R1,R0, LSL #+2
   \   000000B4   0x........         LDR      R2,??DataTable19_1
   \   000000B8   0xE5D13003         LDRB     R3,[R1, #+3]
   \   000000BC   0xE7C23100         STRB     R3,[R2, +R0, LSL #+2]
    570                                        BUFFSPECTR[i*4 + 1] = *((char*)&SPECTR[i] + 2);
   \   000000C0   0xE0822100         ADD      R2,R2,R0, LSL #+2
   \   000000C4   0xE5D13002         LDRB     R3,[R1, #+2]
   \   000000C8   0xE5C23001         STRB     R3,[R2, #+1]
    571                                        BUFFSPECTR[i*4 + 2] = *((char*)&SPECTR[i] + 1);
   \   000000CC   0xE5D11001         LDRB     R1,[R1, #+1]
   \   000000D0   0xE5C21002         STRB     R1,[R2, #+2]
   \   000000D4   0xEAFFFFF2         B        ??COM5_9
    572                                      }
    573                                  break;
    574                      case 0x05:
    575                                  FLAG.temperCORR = !FLAG.temperCORR; //@@@@@@@@ - @@@@@@@@@ @@@@@@@@@@@@@ @@@@@@@@@
   \                     ??COM5_10:
   \   000000D8   0x........         LDR      R0,??DataTable20
   \   000000DC   0xE5901000         LDR      R1,[R0, #+0]
   \   000000E0   0xE3C12C80         BIC      R2,R1,#0x8000
   \   000000E4   0xE2211C80         EOR      R1,R1,#0x8000
   \   000000E8   0xE2011C80         AND      R1,R1,#0x8000
   \   000000EC   0xE1811002         ORR      R1,R1,R2
   \   000000F0   0xE5801000         STR      R1,[R0, #+0]
    576                                  I2CTABLTempFlagW(); //@@@@@@ c @@@@@ @@@@@@@ @ EEPROM
   \   000000F4   0x........         BL       I2CTABLTempFlagW
    577                                  break;
   \   000000F8   0xEA000008         B        ??COM5_5
    578                      case 0x07:  FLAG.tuning = !FLAG.tuning; //@@@@@@@@ - @@@@@@@@@ @@@@@@@@@@@@@ @@@@@@@@@
   \                     ??COM5_11:
   \   000000FC   0x........         LDR      R0,??DataTable20
   \   00000100   0xE5901000         LDR      R1,[R0, #+0]
   \   00000104   0xE3C12F40         BIC      R2,R1,#0x100
   \   00000108   0xE2211F40         EOR      R1,R1,#0x100
   \   0000010C   0xE2011F40         AND      R1,R1,#0x100
   \   00000110   0xE1811002         ORR      R1,R1,R2
   \   00000114   0xE5801000         STR      R1,[R0, #+0]
    579                                  break;
   \   00000118   0xEA000000         B        ??COM5_5
    580                      default:    COMerr02();
   \                     ??COM5_3:
   \   0000011C   0x........         BL       COMerr02
    581                                  break; //@@@ @@@>2  - @@@@@@@@@@@@ @@@@@ @@@@@@
    582                      }//swith adr
    583               STARTEINT0(); //@@@@@@@@@ @@@@@@@@@
   \                     ??COM5_5:
   \   00000120   0x........         BL       STARTEINT0
    584               if (!FLAG.error)
   \   00000124   0x........         LDR      R0,??DataTable20
   \   00000128   0xE5900000         LDR      R0,[R0, #+0]
   \   0000012C   0xE3A01001         MOV      R1,#+1
   \   00000130   0xE11103A0         TST      R1,R0, LSR #+7
   \   00000134   0x1A000005         BNE      ??COM5_12
    585                       // @@@@@
    586                        COMMANDtoUART(8);
   \   00000138   0xE3A00008         MOV      R0,#+8
   \   0000013C   0xE8BD4070         POP      {R4-R6,LR}
   \   00000140   0x........         B        COMMANDtoUART    ;; tailcall
    587               }//if COMMAND
    588               else // COMMAND
    589                         COMerr(0x03); //@@@@@@  - @@@@@@@@@@@@ @@@@@@@@ @@@@@@
   \                     ??COM5_1:
   \   00000144   0xE3A00003         MOV      R0,#+3
   \   00000148   0xE8BD4070         POP      {R4-R6,LR}
   \   0000014C   0x........         B        COMerr           ;; tailcall
    590          }//end COM5
   \                     ??COM5_12:
   \   00000150   0xE8BD4070         POP      {R4-R6,LR}
   \   00000154   0xE12FFF1E         BX       LR               ;; return
    591          /****************************************************************************/
    592          /****** COM6 @@@@@@@@ @@@@@@@@@ @@@@@@@@@ @@@@@@@@@@ *******/

   \                                 In section .text, align 4, keep-with-next
    593          void COM6(void)
    594          {
   \                     COM6:
   \   00000000   0xE92D407C         PUSH     {R2-R6,LR}
    595          short adr,kol;
    596            adr = COMMAND[2]<<8 | COMMAND[3];
    597            //@@@@@@@@ @@@@@ @@@@@@@@@ @@@@@@@ 4-@@@@@(2 @@@@@@@@) @@@@@@@@@ @@ 2 @@@@@(1 @@@@@@@)
    598            //@@@@@@@@ @@@-@@ @@@@@@@@@ @@@@@@@
    599            //@@@@@@ @@@@@@ @@@@@@@@ @@@@@@@, @@@@@@@@@@@@ @@@@@@
    600             FLAG.error = 0;  //@@@@ @@@@@@@@@ @@@@@@
   \   00000004   0x........         LDR      R4,??DataTable20
   \   00000008   0xE5940000         LDR      R0,[R4, #+0]
   \   0000000C   0xE3C00080         BIC      R0,R0,#0x80
   \   00000010   0xE5840000         STR      R0,[R4, #+0]
    601             kol = 8;
    602             STOPEINT0();  //@@@@@@@@@@ @@@@@@@@@@, @@@@ @@@@ @@@@@@@@@@
   \   00000014   0x........         BL       STOPEINT0
    603             switch (adr){
   \   00000018   0x........         LDR      R5,??DataTable19
   \   0000001C   0xE5D50002         LDRB     R0,[R5, #+2]
   \   00000020   0xE5D51003         LDRB     R1,[R5, #+3]
   \   00000024   0xE1810400         ORR      R0,R1,R0, LSL #+8
   \   00000028   0xE1A00800         LSL      R0,R0,#+16
   \   0000002C   0xE1A00840         ASR      R0,R0,#+16
   \   00000030   0xE3500006         CMP      R0,#+6
   \   00000034   0x8A00005D         BHI      ??COM6_1
   \   00000038   0xE7DF1000         LDRB     R1,[PC, R0]
   \   0000003C   0xE08FF101         ADD      PC,PC,R1, LSL #+2
   \                     ??COM6_0:
   \   00000040   0x01 0x0D          DC8      0x1,0xD,0x27,0x39
   \              0x27 0x39    
   \   00000044   0x40 0x4B          DC8      0x40,0x4B,0x51,0x0
   \              0x51 0x00    
    604                      case 0x00:
    605                                  if (TimeByte == 4)  //ATAS
   \                     ??COM6_2:
   \   00000048   0x........         LDR      R0,??DataTable18
   \   0000004C   0xE5D0100B         LDRB     R1,[R0, #+11]
   \   00000050   0xE3510004         CMP      R1,#+4
   \   00000054   0x1A000015         BNE      ??COM6_3
    606                                    TIMEIZMsek =COMMAND[4]<<24 | COMMAND[5]<<16 ;  //@@@@@@ @@@@@ @@@@@@@@@@ @@@@@@@ @@ @@@@@
   \   00000058   0xE5D51004         LDRB     R1,[R5, #+4]
   \   0000005C   0xE5D52005         LDRB     R2,[R5, #+5]
   \   00000060   0xE1A02802         LSL      R2,R2,#+16
   \   00000064   0xE1821C01         ORR      R1,R2,R1, LSL #+24
   \   00000068   0x........         LDR      R2,??DataTable24_2
   \   0000006C   0xE5821000         STR      R1,[R2, #+0]
    607                                  else
    608                                    if (flagTIME2 == 0) //MOODE
    609                                    {
    610                                    TIMEIZMsek =COMMAND[4]<<24 | COMMAND[5]<<16 ;  //@@@@@@ @@@@@ @@@@@@@@@@ @@@@@@@ @@ @@@@@
    611                                    flagTIME2 = 1;
    612                                    break;
    613                                    }
    614                                    flagTIME2 = 0;
   \                     ??COM6_4:
   \   00000070   0xE3A01000         MOV      R1,#+0
   \   00000074   0xE5C0100A         STRB     R1,[R0, #+10]
    615                      case 0x01:  TIMEIZMsek |=  COMMAND[4]<<8 | COMMAND[5];  //@@@@@@ @@@@@ @@@@@@@@@@ @@@@@@@ @@ @@@@@
   \                     ??COM6_5:
   \   00000078   0x........         LDR      R0,??DataTable24_2
   \   0000007C   0xE5901000         LDR      R1,[R0, #+0]
   \   00000080   0xE5D52004         LDRB     R2,[R5, #+4]
   \   00000084   0xE5D53005         LDRB     R3,[R5, #+5]
   \   00000088   0xE1832402         ORR      R2,R3,R2, LSL #+8
   \   0000008C   0xE1826001         ORR      R6,R2,R1
   \   00000090   0xE5806000         STR      R6,[R0, #+0]
    616                                  STOPEINT0();
   \   00000094   0x........         BL       STOPEINT0
    617                                  T1MR0 = TIMEIZMsek*1000; //  = msek @@@@@@
   \   00000098   0xE3A00FFA         MOV      R0,#+1000
   \   0000009C   0xE0010690         MUL      R1,R0,R6
   \   000000A0   0x........         LDR      R0,??DataTable29_2  ;; 0xe0008018
   \   000000A4   0xE5801000         STR      R1,[R0, #+0]
    618                                  STARTEINT0();
   \   000000A8   0x........         BL       STARTEINT0
    619                                  break;
   \   000000AC   0xEA000040         B        ??COM6_6
   \                     ??COM6_3:
   \   000000B0   0xE5D0100A         LDRB     R1,[R0, #+10]
   \   000000B4   0xE3510000         CMP      R1,#+0
   \   000000B8   0x1AFFFFEC         BNE      ??COM6_4
   \   000000BC   0xE5D51004         LDRB     R1,[R5, #+4]
   \   000000C0   0xE5D52005         LDRB     R2,[R5, #+5]
   \   000000C4   0xE1A02802         LSL      R2,R2,#+16
   \   000000C8   0xE1821C01         ORR      R1,R2,R1, LSL #+24
   \   000000CC   0x........         LDR      R2,??DataTable24_2
   \   000000D0   0xE5821000         STR      R1,[R2, #+0]
   \   000000D4   0xE3A01001         MOV      R1,#+1
   \   000000D8   0xE5C0100A         STRB     R1,[R0, #+10]
   \   000000DC   0xEA000034         B        ??COM6_6
    620                      case 0x02:  KODADCEEPROM = I2CKOEFF(0); //@ @@@@@@@@@@@@@@@@ I2C
   \                     ??COM6_7:
   \   000000E0   0xE3A00000         MOV      R0,#+0
   \   000000E4   0x........         BL       I2CKOEFF
   \   000000E8   0x........         LDR      R1,??DataTable29_3
   \   000000EC   0xE1C100B0         STRH     R0,[R1, #+0]
    621                                  if (FLAG.temperCORR)
   \   000000F0   0xE5941000         LDR      R1,[R4, #+0]
   \   000000F4   0xE3A02001         MOV      R2,#+1
   \   000000F8   0xE11207A1         TST      R2,R1, LSR #+15
   \   000000FC   0x0A000004         BEQ      ??COM6_8
    622                                  {
    623                                      Temp_i=0;       //11.07.2008
   \   00000100   0xE3A00000         MOV      R0,#+0
   \   00000104   0x........         LDR      R1,??DataTable29_4
   \   00000108   0xE5810000         STR      R0,[R1, #+0]
    624                                      SETKOEFF(); //@@@@ @@@ @@@@@ @@@@@ FLAG.temperCORR
   \   0000010C   0x........         BL       SETKOEFF
   \   00000110   0xEA000027         B        ??COM6_6
    625                                  }
    626                                  else
    627                                  {
    628                                   KODADC = KODADCEEPROM;
   \                     ??COM6_8:
   \   00000114   0x........         LDR      R1,??DataTable24_3
   \   00000118   0xE1C100B0         STRH     R0,[R1, #+0]
    629                                   ZAPFACTOR(KODADCEEPROM,2); //@@@@@@@@@@@ @@@@@@@@
   \   0000011C   0xE3A01002         MOV      R1,#+2
   \   00000120   0x........         BL       ZAPFACTOR
   \   00000124   0xEA000022         B        ??COM6_6
    630                                  }
    631                                  break;
    632                      case 0x03:  MINPOROG = I2CKOEFF(2);
   \                     ??COM6_9:
   \   00000128   0xE3A00002         MOV      R0,#+2
   \   0000012C   0x........         BL       I2CKOEFF
   \   00000130   0x........         LDR      R1,??DataTable24_4
   \   00000134   0xE1C100B0         STRH     R0,[R1, #+0]
    633                                  ZAPFACTOR(MINPOROG,0);   //@@@@@@ @@@@@
   \   00000138   0xE3A01000         MOV      R1,#+0
   \   0000013C   0x........         BL       ZAPFACTOR
    634                                  break;
   \   00000140   0xEA00001B         B        ??COM6_6
    635                      case 0x04:  MAXPOROG = I2CKOEFF(4);
   \                     ??COM6_10:
   \   00000144   0xE3A00004         MOV      R0,#+4
   \   00000148   0x........         BL       I2CKOEFF
   \   0000014C   0x........         LDR      R1,??DataTable24_5
   \   00000150   0xE1C100B0         STRH     R0,[R1, #+0]
    636                                  ZAPFACTOR(MAXPOROG,1);  //@@@@@@@ @@@@@
   \   00000154   0xE3A01001         MOV      R1,#+1
   \   00000158   0x........         BL       ZAPFACTOR
    637                                  ZAPFACTOR(MINPOROG,0);  //@@@@@ @@@@@@@@@ @@@@@@@@@ LDA @@@
   \   0000015C   0xE3A01000         MOV      R1,#+0
   \   00000160   0x........         LDR      R0,??DataTable24_4
   \   00000164   0xE1D000B0         LDRH     R0,[R0, #+0]
   \   00000168   0x........         BL       ZAPFACTOR
    638                                  break;
   \   0000016C   0xEA000010         B        ??COM6_6
    639                      case 0x05:  MasInt[3] = COMMAND[4]; //@@ @@@@@
   \                     ??COM6_11:
   \   00000170   0x........         LDR      R0,??DataTable29_5
   \   00000174   0xE5D51004         LDRB     R1,[R5, #+4]
   \   00000178   0xE5C01003         STRB     R1,[R0, #+3]
    640                                  MasInt[2] = COMMAND[5];
   \   0000017C   0xE5D51005         LDRB     R1,[R5, #+5]
   \   00000180   0xE5C01002         STRB     R1,[R0, #+2]
    641                                  break;
   \   00000184   0xEA00000A         B        ??COM6_6
    642                      case 0x06:  MasInt[1] = COMMAND[4]; //@@ @@@@@
   \                     ??COM6_12:
   \   00000188   0x........         LDR      R0,??DataTable29_5
   \   0000018C   0xE5D51004         LDRB     R1,[R5, #+4]
   \   00000190   0xE5C01001         STRB     R1,[R0, #+1]
    643                                  MasInt[0] = COMMAND[5];
   \   00000194   0xE5D51005         LDRB     R1,[R5, #+5]
   \   00000198   0xE5C01000         STRB     R1,[R0, #+0]
    644                                  I2CIntevarTemperW();
   \   0000019C   0x........         BL       I2CIntevarTemperW
    645                                  ReadEEPROMIntervalTemper();
   \   000001A0   0x........         BL       ReadEEPROMIntervalTemper
    646                                  //DeInitialiseI2C();
    647                                  InitialiseTimer0();
   \   000001A4   0x........         BL       InitialiseTimer0
    648                                  RESETTMR0();
   \   000001A8   0x........         BL       RESETTMR0
    649                                  break;
   \   000001AC   0xEA000000         B        ??COM6_6
    650                      default:    COMerr02();
   \                     ??COM6_1:
   \   000001B0   0x........         BL       COMerr02
    651                                  break; //@@@ @@@>5 @@@ =1 - @@@@@@@@@@@@ @@@@@ @@@@@@
    652                      }//swith adr
    653              if (!FLAG.error)
   \                     ??COM6_6:
   \   000001B4   0xE5940000         LDR      R0,[R4, #+0]
   \   000001B8   0xE3A01001         MOV      R1,#+1
   \   000001BC   0xE11103A0         TST      R1,R0, LSR #+7
   \   000001C0   0x1A000006         BNE      ??COM6_13
    654                        {// @@@@@
    655                          CRC16(COMMAND,6,0xFF,1);
   \   000001C4   0xE1A03001         MOV      R3,R1
   \   000001C8   0xE3A020FF         MOV      R2,#+255
   \   000001CC   0xE3A01006         MOV      R1,#+6
   \   000001D0   0xE1A00005         MOV      R0,R5
   \   000001D4   0x........         BL       CRC16
    656                          COMMANDtoUART(kol);
   \   000001D8   0xE3A00008         MOV      R0,#+8
   \   000001DC   0x........         BL       COMMANDtoUART
    657                        }//!FLAG.error
    658              STARTEINT0(); //@@@@@@@@@ @@@@@@@@@@,  @@@@ @@@@ @@@@@@@@@@
   \                     ??COM6_13:
   \   000001E0   0xE8BD4073         POP      {R0,R1,R4-R6,LR}
   \   000001E4   0x........         B        STARTEINT0       ;; tailcall
   \   000001E8                      REQUIRE T1MR0
    659          }// END COM6
    660          /****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    661          void COM7(void)
    662          {
   \                     COM7:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
    663             COMMAND[2] = 0;
   \   00000004   0x........         LDR      R0,??DataTable19
   \   00000008   0xE3A01000         MOV      R1,#+0
   \   0000000C   0xE5C01002         STRB     R1,[R0, #+2]
    664              if (FLAG.SPECTR)
   \   00000010   0x........         LDR      R1,??DataTable20
   \   00000014   0xE5911000         LDR      R1,[R1, #+0]
   \   00000018   0xE3A02001         MOV      R2,#+1
   \   0000001C   0xE1120221         TST      R2,R1, LSR #+4
   \   00000020   0x0A000001         BEQ      ??COM7_0
    665                   COMMAND[2] = 2; //@@@@ @@@@@@@@@@ @@@@@@@
   \   00000024   0xE3A02002         MOV      R2,#+2
   \   00000028   0xE5C02002         STRB     R2,[R0, #+2]
    666              if (FLAG.temperCORR)
   \                     ??COM7_0:
   \   0000002C   0xE3A02001         MOV      R2,#+1
   \   00000030   0xE11207A1         TST      R2,R1, LSR #+15
   \   00000034   0x0A000002         BEQ      ??COM7_1
    667                   COMMAND[2] |= 4; //@@@@@@@@@@@@@ @@@@@@@@@ @@@@@@@@
   \   00000038   0xE5D02002         LDRB     R2,[R0, #+2]
   \   0000003C   0xE3822004         ORR      R2,R2,#0x4
   \   00000040   0xE5C02002         STRB     R2,[R0, #+2]
    668              if ( FLAG.testerror )
   \                     ??COM7_1:
   \   00000044   0xE3A02001         MOV      R2,#+1
   \   00000048   0xE11201A1         TST      R2,R1, LSR #+3
   \   0000004C   0x0A000002         BEQ      ??COM7_2
    669                   COMMAND[2] |= 8;//@@@@@@@@@@@@ @@@@@@ @@@@@@@
   \   00000050   0xE5D02002         LDRB     R2,[R0, #+2]
   \   00000054   0xE3822008         ORR      R2,R2,#0x8
   \   00000058   0xE5C02002         STRB     R2,[R0, #+2]
    670              if (FLAG.tuning)
   \                     ??COM7_2:
   \   0000005C   0xE3A02001         MOV      R2,#+1
   \   00000060   0xE1120421         TST      R2,R1, LSR #+8
   \   00000064   0x0A000002         BEQ      ??COM7_3
    671                   COMMAND[2] |= 0x80; //@@@@@ @@@@@@@@@
   \   00000068   0xE5D01002         LDRB     R1,[R0, #+2]
   \   0000006C   0xE3811080         ORR      R1,R1,#0x80
   \   00000070   0xE5C01002         STRB     R1,[R0, #+2]
    672              CRC16(COMMAND,3,0xFF,1);
   \                     ??COM7_3:
   \   00000074   0xE1A03002         MOV      R3,R2
   \   00000078   0xE3A020FF         MOV      R2,#+255
   \   0000007C   0xE3A01003         MOV      R1,#+3
   \   00000080   0x........         BL       CRC16
    673              COMMANDtoUART(5);
   \   00000084   0xE3A00005         MOV      R0,#+5
   \   00000088   0xE8BD4002         POP      {R1,LR}
   \   0000008C   0x........         B        COMMANDtoUART    ;; tailcall
    674          }// END COM7
    675          /****************************************************************************/
    676          /******* @@@@@@@@@@@ ********/

   \                                 In section .text, align 4, keep-with-next
    677          void COM8(void)
    678          {
   \                     COM8:
   \   00000000   0xE92D401C         PUSH     {R2-R4,LR}
    679          unsigned short adr;
    680           int icikl; //@@@ @@@ @@@@@@@@
    681          
    682           adr = COMMAND[2]<<8 | COMMAND[3];
    683            switch (adr){
   \   00000004   0x........         LDR      R0,??DataTable20
   \   00000008   0xE5901000         LDR      R1,[R0, #+0]
   \   0000000C   0x........         LDR      R0,??DataTable19
   \   00000010   0xE5D02002         LDRB     R2,[R0, #+2]
   \   00000014   0xE5D03003         LDRB     R3,[R0, #+3]
   \   00000018   0xE1932402         ORRS     R2,R3,R2, LSL #+8
   \   0000001C   0x0A000006         BEQ      ??COM8_0
   \   00000020   0xE3520001         CMP      R2,#+1
   \   00000024   0x0A000007         BEQ      ??COM8_1
   \   00000028   0xE3520002         CMP      R2,#+2
   \   0000002C   0x0A000019         BEQ      ??COM8_2
   \   00000030   0xE3520081         CMP      R2,#+129
   \   00000034   0x0A000041         BEQ      ??COM8_3
   \   00000038   0xEA000070         B        ??COM8_4
    684                      case 0x00:  // @@@@@@@ @@@@@@ @@@@@@@
    685                                  COMMANDtoUART(8); break;
   \                     ??COM8_0:
   \   0000003C   0xE3A00008         MOV      R0,#+8
   \   00000040   0xE8BD4016         POP      {R1,R2,R4,LR}
   \   00000044   0x........         B        COMMANDtoUART    ;; tailcall
    686                      case 0x01: //@@@@@@@@@@@@@ @@@@@@@ @@@@@@@@@@@@
    687                                  if ((COMMAND[4] == 0) && ((COMMAND[5] ==1) || (COMMAND[5] == 2)))
   \                     ??COM8_1:
   \   00000048   0xE5D01004         LDRB     R1,[R0, #+4]
   \   0000004C   0xE3510000         CMP      R1,#+0
   \   00000050   0x1A00000D         BNE      ??COM8_5
   \   00000054   0xE5D04005         LDRB     R4,[R0, #+5]
   \   00000058   0xE1A00004         MOV      R0,R4
   \   0000005C   0xE3500001         CMP      R0,#+1
   \   00000060   0x0A000001         BEQ      ??COM8_6
   \   00000064   0xE3500002         CMP      R0,#+2
   \   00000068   0x1A000007         BNE      ??COM8_5
    688                                  {
    689                                    COMMANDtoUART(8); //@@@@@@@@
   \                     ??COM8_6:
   \   0000006C   0xE3A00008         MOV      R0,#+8
   \   00000070   0x........         BL       COMMANDtoUART
    690                                    DELAYTACKT(icikl,100);         //@@@@@@@@ @@ 100 @@@@@@-5,4uSek
   \   00000074   0xE3A00064         MOV      R0,#+100
   \                     ??COM8_7:
   \   00000078   0xE2500001         SUBS     R0,R0,#+1
   \   0000007C   0x5AFFFFFD         BPL      ??COM8_7
    691                                    InitialiseUART0(COMMAND[5]);  //@@@@@@@@@@@@@@@@ UART0 - @@@@@ @@@@@ @@@@@@@@@@@@@ @@@ @@@@@@@@ @@@@@@
   \   00000080   0xE1A00004         MOV      R0,R4
   \   00000084   0xE8BD4016         POP      {R1,R2,R4,LR}
   \   00000088   0x........         B        InitialiseUART0  ;; tailcall
    692                                  }
    693                                  else
    694                                    COMerr(0x03); //@@@@@@  - @@@@@@@@@@@@ @@@@@@@@ @@@@@@ -@@@ @@@@@@@@ @@ 1 @@@ 2
   \                     ??COM8_5:
   \   0000008C   0xE3A00003         MOV      R0,#+3
   \   00000090   0xE8BD4016         POP      {R1,R2,R4,LR}
   \   00000094   0x........         B        COMerr           ;; tailcall
    695                                  break;
    696                      case 0x02: // @@@@@@@ @@@@@@@@@@ @@@@@@@@ @@@@@@@@@@@
    697                                  COMMAND[4]=0;
   \                     ??COM8_2:
   \   00000098   0xE3A02000         MOV      R2,#+0
   \   0000009C   0xE5C02004         STRB     R2,[R0, #+4]
    698                                  COMMAND[5]=0;
   \   000000A0   0xE5C02005         STRB     R2,[R0, #+5]
    699                                  if (FLAG.noEINT0)
   \   000000A4   0xE3110001         TST      R1,#0x1
   \   000000A8   0x0A000001         BEQ      ??COM8_8
    700                                          COMMAND[5] = COMMAND[5] | 0x02; //@@@ @@@@ @@ @@@@@@@@@ @ @@@@@@@ 2-@ @@@@@
   \   000000AC   0xE3A02002         MOV      R2,#+2
   \   000000B0   0xE5C02005         STRB     R2,[R0, #+5]
    701                                  if ((FLAG.EEPROMAW) || (FLAG.EEPROMAR) || (FLAG.EEPROMDW) || (FLAG.EEPROMDR))
   \                     ??COM8_8:
   \   000000B4   0xE3110D78         TST      R1,#0x1E00
   \   000000B8   0x0A000002         BEQ      ??COM8_9
    702                                          COMMAND[5] = COMMAND[5] | 0x04; //@@@@@@ @@@@@@ @@@@@@ EEPROM
   \   000000BC   0xE5D02005         LDRB     R2,[R0, #+5]
   \   000000C0   0xE3822004         ORR      R2,R2,#0x4
   \   000000C4   0xE5C02005         STRB     R2,[R0, #+5]
    703                                  if (FLAGOver3byte == 1)
   \                     ??COM8_9:
   \   000000C8   0x........         LDR      R2,??DataTable29_6
   \   000000CC   0xE5D22000         LDRB     R2,[R2, #+0]
   \   000000D0   0xE3520001         CMP      R2,#+1
   \   000000D4   0x1A000002         BNE      ??COM8_10
    704                                          COMMAND[5] = COMMAND[5] | 0x10; //@@@@@@@@@@@@ 3-@ @@@@ @@@@@@@@@ @@@@@@@
   \   000000D8   0xE5D02005         LDRB     R2,[R0, #+5]
   \   000000DC   0xE3822010         ORR      R2,R2,#0x10
   \   000000E0   0xE5C02005         STRB     R2,[R0, #+5]
    705                                  if (FLAG.ErrtempTABL)
   \                     ??COM8_10:
   \   000000E4   0xE3A02001         MOV      R2,#+1
   \   000000E8   0xE1120121         TST      R2,R1, LSR #+2
   \   000000EC   0x0A000002         BEQ      ??COM8_11
    706                                          COMMAND[5] = COMMAND[5] | 0x40; //@@@@@@ CRC @@@@ @@@@ @@@@
   \   000000F0   0xE5D02005         LDRB     R2,[R0, #+5]
   \   000000F4   0xE3822040         ORR      R2,R2,#0x40
   \   000000F8   0xE5C02005         STRB     R2,[R0, #+5]
    707                                  if (FLAG.ErrKoef)
   \                     ??COM8_11:
   \   000000FC   0xE3A02001         MOV      R2,#+1
   \   00000100   0xE1120821         TST      R2,R1, LSR #+16
   \   00000104   0x0A000002         BEQ      ??COM8_12
    708                                          COMMAND[5] = COMMAND[5] | 0x80; //@@@@@@ CRC @@@@@@@@@@@@@
   \   00000108   0xE5D02005         LDRB     R2,[R0, #+5]
   \   0000010C   0xE3822080         ORR      R2,R2,#0x80
   \   00000110   0xE5C02005         STRB     R2,[R0, #+5]
    709                                  if (FLAG.minmaxTemper)
   \                     ??COM8_12:
   \   00000114   0xE3A02001         MOV      R2,#+1
   \   00000118   0xE11208A1         TST      R2,R1, LSR #+17
   \   0000011C   0x0A000001         BEQ      ??COM8_13
    710                                          COMMAND[5] = COMMAND[4] | 0x04; //@@@@@@@@@@@ @@@ @@@@@@@@@ +9.5...+50.5
   \   00000120   0xE3A02004         MOV      R2,#+4
   \   00000124   0xE5C02005         STRB     R2,[R0, #+5]
    711                                  if (FLAG.temperature)
   \                     ??COM8_13:
   \   00000128   0xE3A02001         MOV      R2,#+1
   \   0000012C   0xE11200A1         TST      R2,R1, LSR #+1
   \   00000130   0x0A00002B         BEQ      ??COM8_14
    712                                          COMMAND[5] = COMMAND[4] | 0x08; // @@@@@@ @@@@@@@@@@@ @@ @@@@@@@@
   \   00000134   0xE3A01008         MOV      R1,#+8
   \   00000138   0xE5C01005         STRB     R1,[R0, #+5]
   \   0000013C   0xEA000028         B        ??COM8_14
    713                                  CRC16(COMMAND,6,0xFF,1);
    714                                  COMMANDtoUART(8); //@@@@@@@@
    715                                  break;
    716                      //---- 10.08.2009 ----------------------
    717                          case 0x81: // @@@@@@@ @@@@@@@@@@ @@@@@@@@ @@@@@@@@@@@
    718                                  COMMAND[4]=0;
   \                     ??COM8_3:
   \   00000140   0xE3A02000         MOV      R2,#+0
   \   00000144   0xE5C02004         STRB     R2,[R0, #+4]
    719                                  COMMAND[5]=0;
   \   00000148   0xE5C02005         STRB     R2,[R0, #+5]
    720                                  if (FLAG.noEINT0)
   \   0000014C   0xE3110001         TST      R1,#0x1
   \   00000150   0x0A000001         BEQ      ??COM8_15
    721                                          COMMAND[5] = COMMAND[5] | 0x02; //@@@ @@@@ @@ @@@@@@@@@ @ @@@@@@@ 2-@ @@@@@
   \   00000154   0xE3A02002         MOV      R2,#+2
   \   00000158   0xE5C02005         STRB     R2,[R0, #+5]
    722                                  if ((FLAG.EEPROMAW) || (FLAG.EEPROMAR) || (FLAG.EEPROMDW) || (FLAG.EEPROMDR))
   \                     ??COM8_15:
   \   0000015C   0xE3110D78         TST      R1,#0x1E00
   \   00000160   0x0A000002         BEQ      ??COM8_16
    723                                          COMMAND[5] = COMMAND[5] | 0x04; //@@@@@@ @@@@@@ @@@@@@ EEPROM
   \   00000164   0xE5D02005         LDRB     R2,[R0, #+5]
   \   00000168   0xE3822004         ORR      R2,R2,#0x4
   \   0000016C   0xE5C02005         STRB     R2,[R0, #+5]
    724                                  if (FLAGOver3byte == 1)
   \                     ??COM8_16:
   \   00000170   0x........         LDR      R2,??DataTable29_6
   \   00000174   0xE5D22000         LDRB     R2,[R2, #+0]
   \   00000178   0xE3520001         CMP      R2,#+1
   \   0000017C   0x1A000002         BNE      ??COM8_17
    725                                          COMMAND[5] = COMMAND[5] | 0x10; //@@@@@@@@@@@@ 3-@ @@@@ @@@@@@@@@ @@@@@@@
   \   00000180   0xE5D02005         LDRB     R2,[R0, #+5]
   \   00000184   0xE3822010         ORR      R2,R2,#0x10
   \   00000188   0xE5C02005         STRB     R2,[R0, #+5]
    726                                  if (FLAG.ErrtempTABL)
   \                     ??COM8_17:
   \   0000018C   0xE3A02001         MOV      R2,#+1
   \   00000190   0xE1120121         TST      R2,R1, LSR #+2
   \   00000194   0x0A000002         BEQ      ??COM8_18
    727                                          COMMAND[5] = COMMAND[5] | 0x40; //@@@@@@ CRC @@@@ @@@@ @@@@
   \   00000198   0xE5D02005         LDRB     R2,[R0, #+5]
   \   0000019C   0xE3822040         ORR      R2,R2,#0x40
   \   000001A0   0xE5C02005         STRB     R2,[R0, #+5]
    728                                  if (FLAG.ErrKoef)
   \                     ??COM8_18:
   \   000001A4   0xE3A02001         MOV      R2,#+1
   \   000001A8   0xE1120821         TST      R2,R1, LSR #+16
   \   000001AC   0x0A000002         BEQ      ??COM8_19
    729                                          COMMAND[5] = COMMAND[5] | 0x80; //@@@@@@ CRC @@@@@@@@@@@@@
   \   000001B0   0xE5D02005         LDRB     R2,[R0, #+5]
   \   000001B4   0xE3822080         ORR      R2,R2,#0x80
   \   000001B8   0xE5C02005         STRB     R2,[R0, #+5]
    730                                  if (FLAG.minmaxTemper)
   \                     ??COM8_19:
   \   000001BC   0xE3A02001         MOV      R2,#+1
   \   000001C0   0xE11208A1         TST      R2,R1, LSR #+17
   \   000001C4   0x0A000001         BEQ      ??COM8_20
    731                                          COMMAND[5] = COMMAND[4] | 0x04; //@@@@@@@@@@@ @@@ @@@@@@@@@ +9.5...+50.5
   \   000001C8   0xE3A02004         MOV      R2,#+4
   \   000001CC   0xE5C02005         STRB     R2,[R0, #+5]
    732                                  if (FLAG.temperature)
   \                     ??COM8_20:
   \   000001D0   0xE3A02001         MOV      R2,#+1
   \   000001D4   0xE11200A1         TST      R2,R1, LSR #+1
   \   000001D8   0x0A000001         BEQ      ??COM8_14
    733                                          COMMAND[5] = COMMAND[4] | 0x08; // @@@@@@ @@@@@@@@@@@ @@ @@@@@@@@
   \   000001DC   0xE3A01008         MOV      R1,#+8
   \   000001E0   0xE5C01005         STRB     R1,[R0, #+5]
    734                                  CRC16(COMMAND,6,0xFF,1);
   \                     ??COM8_14:
   \   000001E4   0xE1A03002         MOV      R3,R2
   \   000001E8   0xE3A020FF         MOV      R2,#+255
   \   000001EC   0xE3A01006         MOV      R1,#+6
   \   000001F0   0x........         BL       CRC16
    735                                  COMMANDtoUART(8); //@@@@@@@@
   \   000001F4   0xE3A00008         MOV      R0,#+8
   \   000001F8   0xE8BD4016         POP      {R1,R2,R4,LR}
   \   000001FC   0x........         B        COMMANDtoUART    ;; tailcall
    736                                  break;
    737          
    738                      default:    COMerr02();
   \                     ??COM8_4:
   \   00000200   0xE8BD4013         POP      {R0,R1,R4,LR}
   \   00000204   0x........         B        COMerr02         ;; tailcall
    739                                  break; //@@@ @@@>2  - @@@@@@@@@@@@ @@@@@ @@@@@@
    740                    }//swith adr
    741          }// END COM8
    742          /****************************************************************************/
    743          /******* @@@@@@ @@@@@@@ @@@@@@@@@@@@@@ @@@@@@@ ********/

   \                                 In section .text, align 4, keep-with-next
    744          void COMB(void)
    745          {
   \                     COMB:
   \   00000000   0xE92D40F8         PUSH     {R3-R7,LR}
    746            unsigned int adr,kol;
    747            int i;
    748            adr = (COMMAND[3] << 8) | COMMAND[4];
   \   00000004   0x........         LDR      R4,??DataTable24
   \   00000008   0xE5D40003         LDRB     R0,[R4, #+3]
   \   0000000C   0xE5D41004         LDRB     R1,[R4, #+4]
   \   00000010   0xE1815400         ORR      R5,R1,R0, LSL #+8
    749            kol = (COMMAND[5] << 8) | COMMAND[6];
   \   00000014   0xE5D46006         LDRB     R6,[R4, #+6]
   \   00000018   0xE5D40005         LDRB     R0,[R4, #+5]
   \   0000001C   0xE1A01000         MOV      R1,R0
   \   00000020   0xE1A02006         MOV      R2,R6
   \   00000024   0xE1821401         ORR      R1,R2,R1, LSL #+8
    750            if (adr > 0xC00)
   \   00000028   0xE3A02001         MOV      R2,#+1
   \   0000002C   0xE3822EC0         ORR      R2,R2,#0xC00
   \   00000030   0xE1550002         CMP      R5,R2
   \   00000034   0x3A000001         BCC      ??COMB_0
    751                      COMerr02(); //@@@@@@ @@@@@@
   \   00000038   0xE8BD40F1         POP      {R0,R4-R7,LR}
   \   0000003C   0x........         B        COMerr02         ;; tailcall
    752            else
    753              if ((adr+kol) > 3072 || (COMMAND[5] !=0))
   \                     ??COMB_0:
   \   00000040   0xE0817005         ADD      R7,R1,R5
   \   00000044   0xE1570002         CMP      R7,R2
   \   00000048   0x2A000001         BCS      ??COMB_1
   \   0000004C   0xE3500000         CMP      R0,#+0
   \   00000050   0x0A000002         BEQ      ??COMB_2
    754                      COMerr(0x03); //@@@@@@ @@@@@@
   \                     ??COMB_1:
   \   00000054   0xE3A00003         MOV      R0,#+3
   \   00000058   0xE8BD40F2         POP      {R1,R4-R7,LR}
   \   0000005C   0x........         B        COMerr           ;; tailcall
    755                   else
    756                   {
    757                     if (adr == 0)
   \                     ??COMB_2:
   \   00000060   0xE3550000         CMP      R5,#+0
   \   00000064   0x1A000006         BNE      ??COMB_3
    758                     { if (TimeByte == 2)
   \   00000068   0x........         LDR      R0,??DataTable29_7
   \   0000006C   0xE5D0000B         LDRB     R0,[R0, #+11]
   \   00000070   0xE3500002         CMP      R0,#+2
   \   00000074   0x1A000001         BNE      ??COMB_4
    759                           //TURNSPECTR(SPECTR,BUFFSPECTR);  //@@@@@@@@@@@@@@
    760                            TURNSPECTR_B_S();
   \   00000078   0x........         BL       TURNSPECTR_B_S
   \   0000007C   0xEA000000         B        ??COMB_3
    761                           else
    762                             //MOVSPECTR(SPECTR,BUFFSPECTR);  //@@@@@@@@@@ @@@@@@@ @@@@@@ @ @@@@@@
    763                             MOVSPECTR_B_S();
   \                     ??COMB_4:
   \   00000080   0x........         BL       MOVSPECTR_B_S
    764                     }
    765                     COMMAND[2] = COMMAND[6]; //@@@-@@
   \                     ??COMB_3:
   \   00000084   0xE5C46002         STRB     R6,[R4, #+2]
    766                     CRC16(COMMAND,3,0xFF,0);
   \   00000088   0xE3A03000         MOV      R3,#+0
   \   0000008C   0xE3A020FF         MOV      R2,#+255
   \   00000090   0xE3A01003         MOV      R1,#+3
   \   00000094   0xE1A00004         MOV      R0,R4
   \   00000098   0x........         BL       CRC16
    767                     CRC16(BUFFSPECTR+adr,COMMAND[2],0,0);
   \   0000009C   0x........         LDR      R6,??DataTable29_8
   \   000000A0   0xE3A03000         MOV      R3,#+0
   \   000000A4   0xE1A02003         MOV      R2,R3
   \   000000A8   0xE5D40002         LDRB     R0,[R4, #+2]
   \   000000AC   0xE1A01000         MOV      R1,R0
   \   000000B0   0xE0860005         ADD      R0,R6,R5
   \   000000B4   0x........         BL       CRC16
    768                     COMMANDtoUART(3);        //@@@@@@ @@@@@@@
   \   000000B8   0xE3A00003         MOV      R0,#+3
   \   000000BC   0x........         BL       COMMANDtoUART
    769          
    770                     for (i=adr; i<(adr+kol); i++) //@@@@@@
   \   000000C0   0xEA000002         B        ??COMB_5
    771                            BYTEtoUART(BUFFSPECTR[i]);
   \                     ??COMB_6:
   \   000000C4   0xE7D60005         LDRB     R0,[R6, +R5]
   \   000000C8   0x........         BL       BYTEtoUART
   \   000000CC   0xE2855001         ADD      R5,R5,#+1
   \                     ??COMB_5:
   \   000000D0   0xE1550007         CMP      R5,R7
   \   000000D4   0x3AFFFFFA         BCC      ??COMB_6
    772          
    773                     BYTEtoUART(CRClo);   //crc
   \   000000D8   0x........         LDR      R4,??DataTable29_7
   \   000000DC   0xE1D400B2         LDRH     R0,[R4, #+2]
   \   000000E0   0xE20000FF         AND      R0,R0,#0xFF
   \   000000E4   0x........         BL       BYTEtoUART
    774                     BYTEtoUART(CRChi);
   \   000000E8   0xE1D400B0         LDRH     R0,[R4, #+0]
   \   000000EC   0xE20000FF         AND      R0,R0,#0xFF
   \   000000F0   0xE8BD40F2         POP      {R1,R4-R7,LR}
   \   000000F4   0x........         B        BYTEtoUART       ;; tailcall
    775                   }
    776          
    777          }// END COMB
    778          /****************************************************************************/
    779          /******* @@@@@@@@ @@@@@@@@@@@@@@@@@ @@@ ********/

   \                                 In section .text, align 4, keep-with-next
    780          void COM10(void)
    781          {
   \                     COM10:
   \   00000000   0xE92D4038         PUSH     {R3-R5,LR}
    782          
    783            switch (COMMAND[4])
   \   00000004   0x........         LDR      R4,??DataTable29_9
   \   00000008   0x........         LDR      R5,??DataTable24
   \   0000000C   0xE5D50004         LDRB     R0,[R5, #+4]
   \   00000010   0xE3500004         CMP      R0,#+4
   \   00000014   0x8A000022         BHI      ??COM10_1
   \   00000018   0xE7DF1000         LDRB     R1,[PC, R0]
   \   0000001C   0xE08FF101         ADD      PC,PC,R1, LSL #+2
   \                     ??COM10_0:
   \   00000020   0x01 0x06          DC8      0x1,0x6,0xD,0x15
   \              0x0D 0x15    
   \   00000024   0x1D 0x00          DC8      0x1D,0x0,0x0,0x0
   \              0x00 0x00    
    784            {
    785                     case 0x00:  // @@@@@@@@@@@@@@@@@ @@@ @@@@@@@
    786                                   MasEEPROMKoef[12]  = COMMAND[8];     //1@@@@ - @@@@@@@@@@@@@@@@@ @@@
   \                     ??COM10_2:
   \   00000028   0xE5D50008         LDRB     R0,[R5, #+8]
   \   0000002C   0xE5C4000C         STRB     R0,[R4, #+12]
    787                                   COMMAND_temp[0] = COMMAND[8];
   \   00000030   0x........         LDR      R1,??DataTable29_10
   \   00000034   0xE5C10000         STRB     R0,[R1, #+0]
    788                                   break;
   \   00000038   0xEA00001A         B        ??COM10_3
    789                     case 0x01: // @@@@@ @@@@@@
    790                                   MasEEPROMKoef[14]  = COMMAND[8];  //@@@@@@ @@ @@@@
   \                     ??COM10_4:
   \   0000003C   0xE5D50008         LDRB     R0,[R5, #+8]
   \   00000040   0xE5C4000E         STRB     R0,[R4, #+14]
    791                                   COMMAND_temp[1] =  COMMAND[8];
   \   00000044   0x........         LDR      R1,??DataTable29_10
   \   00000048   0xE5C10001         STRB     R0,[R1, #+1]
    792                                   COMMAND_temp[2] =  COMMAND[7];
   \   0000004C   0xE5D50007         LDRB     R0,[R5, #+7]
   \   00000050   0xE5C10002         STRB     R0,[R1, #+2]
    793                                   break;
   \   00000054   0xEA000013         B        ??COM10_3
    794                     case 0x02: // @@@@@@@@@ @@@@@
    795                                   MasEEPROMKoef[9]  = COMMAND[7];    //@@ @@@@
   \                     ??COM10_5:
   \   00000058   0xE5D52007         LDRB     R2,[R5, #+7]
   \   0000005C   0xE5C42009         STRB     R2,[R4, #+9]
    796                                   MasEEPROMKoef[8]  = COMMAND[8];    //@@ @@@@
   \   00000060   0xE5D50008         LDRB     R0,[R5, #+8]
   \   00000064   0xE5C40008         STRB     R0,[R4, #+8]
    797                                   COMMAND_temp[3] =  COMMAND[8];
   \   00000068   0x........         LDR      R1,??DataTable29_10
   \   0000006C   0xE5C10003         STRB     R0,[R1, #+3]
    798                                   COMMAND_temp[4] =  COMMAND[7];
   \   00000070   0xE5C12004         STRB     R2,[R1, #+4]
    799                                   break;
   \   00000074   0xEA00000B         B        ??COM10_3
    800                     case 0x03: // @@@@ @@@@@@@@@@@@
    801                                   MasEEPROMKoef[11]  = COMMAND[7];    //@@@
   \                     ??COM10_6:
   \   00000078   0xE5D52007         LDRB     R2,[R5, #+7]
   \   0000007C   0xE5C4200B         STRB     R2,[R4, #+11]
    802                                   MasEEPROMKoef[10]  = COMMAND[8];    //@@@@@@
   \   00000080   0xE5D50008         LDRB     R0,[R5, #+8]
   \   00000084   0xE5C4000A         STRB     R0,[R4, #+10]
    803                                   COMMAND_temp[5] =  COMMAND[8];
   \   00000088   0x........         LDR      R1,??DataTable29_10
   \   0000008C   0xE5C10005         STRB     R0,[R1, #+5]
    804                                   COMMAND_temp[6] =  COMMAND[7];
   \   00000090   0xE5C12006         STRB     R2,[R1, #+6]
    805                                   break;
   \   00000094   0xEA000003         B        ??COM10_3
    806                     case 0x04: // @@@@@@@@@@@@ @@@@@ @@@@@@@
    807                                   MasEEPROMKoef[13]  = COMMAND[8];
   \                     ??COM10_7:
   \   00000098   0xE5D50008         LDRB     R0,[R5, #+8]
   \   0000009C   0xE5C4000D         STRB     R0,[R4, #+13]
    808                                   break;
   \   000000A0   0xEA000000         B        ??COM10_3
    809                      default:    COMerr02();
   \                     ??COM10_1:
   \   000000A4   0x........         BL       COMerr02
    810                                  break; //@@@ @@@>2  - @@@@@@@@@@@@ @@@@@ @@@@@@
    811                    }//swith
    812             //COMMAND[3] = 2;
    813             CRC16(COMMAND,6,0xFF,1);
   \                     ??COM10_3:
   \   000000A8   0xE3A03001         MOV      R3,#+1
   \   000000AC   0xE3A020FF         MOV      R2,#+255
   \   000000B0   0xE3A01006         MOV      R1,#+6
   \   000000B4   0xE1A00005         MOV      R0,R5
   \   000000B8   0x........         BL       CRC16
    814             COMMANDtoUART(8);
   \   000000BC   0xE3A00008         MOV      R0,#+8
   \   000000C0   0x........         BL       COMMANDtoUART
    815            //COMMANDtoUARTnew(11);
    816            //COMMANDtoUARTnew(11);
    817            if (COMMAND[4] == 4)
   \   000000C4   0xE5D50004         LDRB     R0,[R5, #+4]
   \   000000C8   0xE3500004         CMP      R0,#+4
   \   000000CC   0x1A000011         BNE      ??COM10_8
    818            {
    819          
    820              //------------- 14.08.2009 ----------------------
    821              if( COMMAND_temp[0] != 1)
   \   000000D0   0x........         LDR      R0,??DataTable29_10
   \   000000D4   0xE5D01000         LDRB     R1,[R0, #+0]
   \   000000D8   0xE3510001         CMP      R1,#+1
   \   000000DC   0x0A000009         BEQ      ??COM10_9
    822              {
    823                // @@@@@ @@@@@@
    824                MasEEPROMKoef[14] = COMMAND_temp[3];
   \   000000E0   0xE5D01003         LDRB     R1,[R0, #+3]
   \   000000E4   0xE5C4100E         STRB     R1,[R4, #+14]
    825                // @@@@@@@@@ @@@@@
    826                MasEEPROMKoef[9]  = COMMAND_temp[6];    //@@ @@@@
   \   000000E8   0xE5D01006         LDRB     R1,[R0, #+6]
   \   000000EC   0xE5C41009         STRB     R1,[R4, #+9]
    827                MasEEPROMKoef[8]  = COMMAND_temp[5];
   \   000000F0   0xE5D01005         LDRB     R1,[R0, #+5]
   \   000000F4   0xE5C41008         STRB     R1,[R4, #+8]
    828                // @@@@ @@@@@@@@@@@@
    829                MasEEPROMKoef[11] = COMMAND_temp[2];    //@@@
   \   000000F8   0xE5D01002         LDRB     R1,[R0, #+2]
   \   000000FC   0xE5C4100B         STRB     R1,[R4, #+11]
    830                MasEEPROMKoef[10] = COMMAND_temp[1];
   \   00000100   0xE5D00001         LDRB     R0,[R0, #+1]
   \   00000104   0xE5C4000A         STRB     R0,[R4, #+10]
    831              }
    832              MasEEPROMKoef[12] = 1;
   \                     ??COM10_9:
   \   00000108   0xE3A00001         MOV      R0,#+1
   \   0000010C   0xE5C4000C         STRB     R0,[R4, #+12]
    833              I2CMasKoefW ();
   \   00000110   0xE8BD4031         POP      {R0,R4,R5,LR}
   \   00000114   0x........         B        I2CMasKoefW      ;; tailcall
    834             //DeInitialiseI2C();
    835            }
    836          }// END COM10
   \                     ??COM10_8:
   \   00000118   0xE8BD4031         POP      {R0,R4,R5,LR}
   \   0000011C   0xE12FFF1E         BX       LR               ;; return
    837          /****************************************************************************/
    838          /******* @@@@@@ @@@@@@@@@@@@@@@@@ @@@ ********/

   \                                 In section .text, align 4, keep-with-next
    839          void COM11(void)
    840          {
   \                     COM11:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    841              I2CMasKoefR ();
   \   00000004   0x........         BL       I2CMasKoefR
    842              //DeInitialiseI2C();
    843              COMMAND[2] = 0x0A;  // 10-@@@- @@@@
   \   00000008   0x........         LDR      R4,??DataTable24
   \   0000000C   0xE3A0000A         MOV      R0,#+10
   \   00000010   0xE5C40002         STRB     R0,[R4, #+2]
    844              COMMAND[3] = MasEEPROMKoef[12];     //1@@@@ - @@@@@@@@@@@@@@@@@ @@@
   \   00000014   0x........         LDR      R0,??DataTable29_9
   \   00000018   0xE5D0100C         LDRB     R1,[R0, #+12]
   \   0000001C   0xE5C41003         STRB     R1,[R4, #+3]
    845              COMMAND[4] = MasEEPROMKoef[14];     //@@@@@ @@@@@@
   \   00000020   0xE5D0100E         LDRB     R1,[R0, #+14]
   \   00000024   0xE5C41004         STRB     R1,[R4, #+4]
    846              COMMAND[5] = MasEEPROMKoef[9];  //c@ @@@@ @@@@@@@@@ @@@@@
   \   00000028   0xE5D01009         LDRB     R1,[R0, #+9]
   \   0000002C   0xE5C41005         STRB     R1,[R4, #+5]
    847              COMMAND[6] = MasEEPROMKoef[8];
   \   00000030   0xE5D01008         LDRB     R1,[R0, #+8]
   \   00000034   0xE5C41006         STRB     R1,[R4, #+6]
    848              COMMAND[7] = MasEEPROMKoef[11];  // @@@
   \   00000038   0xE5D0100B         LDRB     R1,[R0, #+11]
   \   0000003C   0xE5C41007         STRB     R1,[R4, #+7]
    849              COMMAND[8] = MasEEPROMKoef[10];  // @@@@@@ @@@@@@@@@@@@
   \   00000040   0xE5D0100A         LDRB     R1,[R0, #+10]
   \   00000044   0xE5C41008         STRB     R1,[R4, #+8]
    850              if (MasEEPROMKoef[6] == 2) //@@@@ @@@@@@ 1024!!!!!
   \   00000048   0xE5D00006         LDRB     R0,[R0, #+6]
   \   0000004C   0xE3500002         CMP      R0,#+2
   \   00000050   0x1A000005         BNE      ??COM11_0
    851              {
    852                toCOMMAND2byte(9,1024); // @@@-@@ @@@@@@@
   \   00000054   0xE3A01E40         MOV      R1,#+1024
   \   00000058   0xE3A00009         MOV      R0,#+9
   \   0000005C   0x........         BL       toCOMMAND2byte
    853                toCOMMAND2byte(11,1024*3); // @@@-@@ @@@@ @@@@@@@
   \   00000060   0xE3A01EC0         MOV      R1,#+3072
   \   00000064   0xE3A0000B         MOV      R0,#+11
   \   00000068   0x........         BL       toCOMMAND2byte
    854              }
    855              CRC16(COMMAND,13,0xFF,1);
   \                     ??COM11_0:
   \   0000006C   0xE3A03001         MOV      R3,#+1
   \   00000070   0xE3A020FF         MOV      R2,#+255
   \   00000074   0xE3A0100D         MOV      R1,#+13
   \   00000078   0xE1A00004         MOV      R0,R4
   \   0000007C   0x........         BL       CRC16
    856              COMMANDtoUART(15);
   \   00000080   0xE3A0000F         MOV      R0,#+15
   \   00000084   0xE8BD4010         POP      {R4,LR}
   \   00000088   0x........         B        COMMANDtoUART    ;; tailcall
    857          }// END COM11
    858          /****************************************************************************/
    859          /******* @@@@@@ @@@@@@@ @@@@@@ @@@@@@@@@ ********/

   \                                 In section .text, align 4, keep-with-next
    860          void COM12(void)
    861          {
   \                     COM12:
   \   00000000   0xE92D40F8         PUSH     {R3-R7,LR}
    862            unsigned int adr;
    863            int i;
    864          /* @@@ @@@@ @@@@@@@   @@@ @@@@ @@@ @@ @@@@@ @@@ @@@@ @@@ @@ @@@@@*/
    865          if ((COMMAND[2] != 4) || (COMMAND[5]!=0) || (COMMAND[6] > 223))
   \   00000004   0x........         LDR      R4,??DataTable24
   \   00000008   0xE5D40002         LDRB     R0,[R4, #+2]
   \   0000000C   0xE3500004         CMP      R0,#+4
   \   00000010   0x1A000006         BNE      ??COM12_0
   \   00000014   0xE5D40005         LDRB     R0,[R4, #+5]
   \   00000018   0xE3500000         CMP      R0,#+0
   \   0000001C   0x1A000003         BNE      ??COM12_0
   \   00000020   0xE5D40006         LDRB     R0,[R4, #+6]
   \   00000024   0xE1A01000         MOV      R1,R0
   \   00000028   0xE35100E0         CMP      R1,#+224
   \   0000002C   0xBA000002         BLT      ??COM12_1
    866                        COMerr(0x03); //@@@@@@  - @@@@@@@@@@@@ @@@@@@@@ @@@@@@
   \                     ??COM12_0:
   \   00000030   0xE3A00003         MOV      R0,#+3
   \   00000034   0xE8BD40F2         POP      {R1,R4-R7,LR}
   \   00000038   0x........         B        COMerr           ;; tailcall
    867              else
    868              {
    869                if ((COMMAND[3] != 0) || (COMMAND[4] >223))
   \                     ??COM12_1:
   \   0000003C   0xE5D41003         LDRB     R1,[R4, #+3]
   \   00000040   0xE3510000         CMP      R1,#+0
   \   00000044   0x1A000003         BNE      ??COM12_2
   \   00000048   0xE5D45004         LDRB     R5,[R4, #+4]
   \   0000004C   0xE1A01005         MOV      R1,R5
   \   00000050   0xE35100E0         CMP      R1,#+224
   \   00000054   0xBA000002         BLT      ??COM12_3
    870                                        COMerr(0x02); //@@@@@@  - @@@@@@@@@@@@ @@@@@ @@@@@@
   \                     ??COM12_2:
   \   00000058   0xE3A00002         MOV      R0,#+2
   \   0000005C   0xE8BD40F2         POP      {R1,R4-R7,LR}
   \   00000060   0x........         B        COMerr           ;; tailcall
    871                 else /*@@@@@@ @@@@@@*/
    872                 {
    873                   COMMAND[2] = COMMAND[6]; //@@@-@@ @@@@
   \                     ??COM12_3:
   \   00000064   0xE5C40002         STRB     R0,[R4, #+2]
    874                   adr = COMMAND[4];    //@@@@@ 1-@@ @@@@@
    875                   CRC16(COMMAND,3,0xFF,0);
   \   00000068   0xE3A03000         MOV      R3,#+0
   \   0000006C   0xE3A020FF         MOV      R2,#+255
   \   00000070   0xE3A01003         MOV      R1,#+3
   \   00000074   0xE1A00004         MOV      R0,R4
   \   00000078   0x........         BL       CRC16
    876                   COMMANDtoUART(3);
   \   0000007C   0xE3A00003         MOV      R0,#+3
   \   00000080   0x........         BL       COMMANDtoUART
    877                   CRC16(CurrentDIzm+adr,COMMAND[2],0,0);
   \   00000084   0x........         LDR      R6,??DataTable29_7
   \   00000088   0xE3A03000         MOV      R3,#+0
   \   0000008C   0xE1A02003         MOV      R2,R3
   \   00000090   0xE5D40002         LDRB     R0,[R4, #+2]
   \   00000094   0xE1A01000         MOV      R1,R0
   \   00000098   0xE286000C         ADD      R0,R6,#+12
   \   0000009C   0xE0800005         ADD      R0,R0,R5
   \   000000A0   0x........         BL       CRC16
    878          
    879                   for (i = adr-1; ++i < (adr+COMMAND[2]);)
   \   000000A4   0xE2457001         SUB      R7,R5,#+1
   \   000000A8   0xEA000002         B        ??COM12_4
    880                           BYTEtoUART(CurrentDIzm[i]);/*@@@@@@@@@@ @@@@@@ @ CRC*/
   \                     ??COM12_5:
   \   000000AC   0xE286000C         ADD      R0,R6,#+12
   \   000000B0   0xE7D00007         LDRB     R0,[R0, +R7]
   \   000000B4   0x........         BL       BYTEtoUART
   \                     ??COM12_4:
   \   000000B8   0xE2877001         ADD      R7,R7,#+1
   \   000000BC   0xE5D40002         LDRB     R0,[R4, #+2]
   \   000000C0   0xE0800005         ADD      R0,R0,R5
   \   000000C4   0xE1570000         CMP      R7,R0
   \   000000C8   0x3AFFFFF7         BCC      ??COM12_5
    881                   BYTEtoUART(CRClo);   //crc
   \   000000CC   0xE1D600B2         LDRH     R0,[R6, #+2]
   \   000000D0   0xE20000FF         AND      R0,R0,#0xFF
   \   000000D4   0x........         BL       BYTEtoUART
    882                   BYTEtoUART(CRChi);
   \   000000D8   0xE1D600B0         LDRH     R0,[R6, #+0]
   \   000000DC   0xE20000FF         AND      R0,R0,#0xFF
   \   000000E0   0xE8BD40F2         POP      {R1,R4-R7,LR}
   \   000000E4   0x........         B        BYTEtoUART       ;; tailcall
    883          
    884                  }/*@@@@@@ @@@@@@*/
    885              } /*else*/
    886          
    887          }// END COM12
    888          /****************************************************************************/
    889          /******* @@@@@@@@ @@@@@@@ @@@@@@ @@@@@@@@@ ********/

   \                                 In section .text, align 4, keep-with-next
    890          void COM13(void)
    891          {
   \                     COM13:
   \   00000000   0xE92D40F8         PUSH     {R3-R7,LR}
    892          int i;
    893          /* @@@ @@@@ @@@ @@ @@@@@ @@@ @@@@ @@@ @@ @@@@@*/
    894          if ( (COMMAND[5]!=0) || (COMMAND[6] > 223))
   \   00000004   0x........         LDR      R4,??DataTable24
   \   00000008   0xE5D40005         LDRB     R0,[R4, #+5]
   \   0000000C   0xE3500000         CMP      R0,#+0
   \   00000010   0x1A000002         BNE      ??COM13_0
   \   00000014   0xE5D40006         LDRB     R0,[R4, #+6]
   \   00000018   0xE35000DF         CMP      R0,#+223
   \   0000001C   0xDA000002         BLE      ??COM13_1
    895                        COMerr(0x03); //@@@@@@  - @@@@@@@@@@@@ @@@@@@@@ @@@@@@
   \                     ??COM13_0:
   \   00000020   0xE3A00003         MOV      R0,#+3
   \   00000024   0x........         BL       COMerr
   \   00000028   0xEA00002F         B        ??COM13_2
    896          
    897            else
    898              {
    899                if ((COMMAND[3] != 0) || (COMMAND[4] >=223))
   \                     ??COM13_1:
   \   0000002C   0xE5D40003         LDRB     R0,[R4, #+3]
   \   00000030   0xE3500000         CMP      R0,#+0
   \   00000034   0x1A000002         BNE      ??COM13_3
   \   00000038   0xE5D40004         LDRB     R0,[R4, #+4]
   \   0000003C   0xE35000DF         CMP      R0,#+223
   \   00000040   0xBA000002         BLT      ??COM13_4
    900                                        COMerr(0x02); //@@@@@@  - @@@@@@@@@@@@ @@@@@ @@@@@@
   \                     ??COM13_3:
   \   00000044   0xE3A00002         MOV      R0,#+2
   \   00000048   0x........         BL       COMerr
   \   0000004C   0xEA000026         B        ??COM13_2
    901                 else /* @@@@@@@@ @@@@@@@@@@@ @@@@@*/
    902                 {
    903                  CRC16(COMMAND,7,0xFF,0);
   \                     ??COM13_4:
   \   00000050   0xE3A03000         MOV      R3,#+0
   \   00000054   0xE3A020FF         MOV      R2,#+255
   \   00000058   0xE3A01007         MOV      R1,#+7
   \   0000005C   0xE1A00004         MOV      R0,R4
   \   00000060   0x........         BL       CRC16
    904                  CRC16(CurrentDIzm+COMMAND[4],COMMAND[6],0,0);
   \   00000064   0x........         LDR      R5,??DataTable29_7
   \   00000068   0xE3A03000         MOV      R3,#+0
   \   0000006C   0xE1A02003         MOV      R2,R3
   \   00000070   0xE5D40006         LDRB     R0,[R4, #+6]
   \   00000074   0xE1A01000         MOV      R1,R0
   \   00000078   0xE285000C         ADD      R0,R5,#+12
   \   0000007C   0xE5D4C004         LDRB     R12,[R4, #+4]
   \   00000080   0xE080000C         ADD      R0,R0,R12
   \   00000084   0x........         BL       CRC16
    905                  if( (CRClo == CurrentDIzm[COMMAND[4]+ByteCurrentIzm-2]) && (CRChi == CurrentDIzm[COMMAND[4]+ByteCurrentIzm-1]) )
   \   00000088   0xE5D46004         LDRB     R6,[R4, #+4]
   \   0000008C   0xE5950004         LDR      R0,[R5, #+4]
   \   00000090   0xE0800006         ADD      R0,R0,R6
   \   00000094   0xE0850000         ADD      R0,R5,R0
   \   00000098   0xE1D510B2         LDRH     R1,[R5, #+2]
   \   0000009C   0xE5D0200A         LDRB     R2,[R0, #+10]
   \   000000A0   0xE1510002         CMP      R1,R2
   \   000000A4   0x1A000010         BNE      ??COM13_2
   \   000000A8   0xE1D510B0         LDRH     R1,[R5, #+0]
   \   000000AC   0xE5D0000B         LDRB     R0,[R0, #+11]
   \   000000B0   0xE1510000         CMP      R1,R0
   \   000000B4   0x1A00000C         BNE      ??COM13_2
    906                    {/*@@@@@@@@@@ @@@@@@@ */
    907                      COMMANDtoUART(7);
   \   000000B8   0xE3A00007         MOV      R0,#+7
   \   000000BC   0x........         BL       COMMANDtoUART
    908                       for (i = COMMAND[4]-1; ++i < (COMMAND[4]+COMMAND[6]+2);)
   \   000000C0   0xE2467001         SUB      R7,R6,#+1
   \   000000C4   0xEA000002         B        ??COM13_5
    909                            BYTEtoUART(CurrentDIzm[i]); /*@@@@@@@@@@ @@@@@@ @ CRC*/
   \                     ??COM13_6:
   \   000000C8   0xE285000C         ADD      R0,R5,#+12
   \   000000CC   0xE7D00007         LDRB     R0,[R0, +R7]
   \   000000D0   0x........         BL       BYTEtoUART
   \                     ??COM13_5:
   \   000000D4   0xE2877001         ADD      R7,R7,#+1
   \   000000D8   0xE5D40006         LDRB     R0,[R4, #+6]
   \   000000DC   0xE0800006         ADD      R0,R0,R6
   \   000000E0   0xE2800002         ADD      R0,R0,#+2
   \   000000E4   0xE1570000         CMP      R7,R0
   \   000000E8   0xBAFFFFF6         BLT      ??COM13_6
    910                    } /*@@@@@@@ @@@@@@@ @ @@@@@@*/
    911          
    912                 }/*@@@@@@@@ @@@@@@@@@@ @@@@@- @@@@@@@@@*/
    913              } /*else*/
    914          //CurrentDIzm[ByteCurrentIzm-2] = 0; //@@@@@@ CRC
    915          //CurrentDIzm[ByteCurrentIzm-1] = 0;
    916          ByteCurrentIzm = 0;
   \                     ??COM13_2:
   \   000000EC   0xE3A00000         MOV      R0,#+0
   \   000000F0   0x........         LDR      R1,??DataTable29_7
   \   000000F4   0xE5810004         STR      R0,[R1, #+4]
    917          }// END COM13
   \   000000F8   0xE8BD40F1         POP      {R0,R4-R7,LR}
   \   000000FC   0xE12FFF1E         BX       LR               ;; return
    918          /****************************************************************************/
    919          /******* @@@@@@@@ @@@@@@ @ @@@@@@@@@@@@ @@@@@@ ********/

   \                                 In section .text, align 4, keep-with-next
    920          void COM15(void)
    921          {
   \                     COM15:
   \   00000000   0xE92D4FF8         PUSH     {R3-R11,LR}
    922          int i;
    923          unsigned int kol,adr,acrc;
    924          adr = (COMMAND[5] << 8) | COMMAND[6]; /*@@@@@ @@@@@@@*/
   \   00000004   0x........         LDR      R0,??DataTable29_11
   \   00000008   0xE5D01005         LDRB     R1,[R0, #+5]
   \   0000000C   0xE5D02006         LDRB     R2,[R0, #+6]
   \   00000010   0xE1824401         ORR      R4,R2,R1, LSL #+8
    925          /* @@@ @@@@ @@@ @@ @@@@@ @@@ @@@@ @@@ @@ @@@@@*/
    926          kol =(COMMAND[7] << 8) | COMMAND[8];
   \   00000014   0xE5D01007         LDRB     R1,[R0, #+7]
   \   00000018   0xE5D02008         LDRB     R2,[R0, #+8]
   \   0000001C   0xE1825401         ORR      R5,R2,R1, LSL #+8
    927          acrc =adr+kol-TimeByte; /*@@@@@ @@@@@ 4(2)-@@@@@*/
   \   00000020   0x........         LDR      R6,??DataTable29_7
   \   00000024   0xE5D6700B         LDRB     R7,[R6, #+11]
   \   00000028   0xE1A0A007         MOV      R10,R7
   \   0000002C   0xE0851004         ADD      R1,R5,R4
   \   00000030   0xE041800A         SUB      R8,R1,R10
    928          if (adr > 0xC00)
   \   00000034   0xE3A01001         MOV      R1,#+1
   \   00000038   0xE3811EC0         ORR      R1,R1,#0xC00
   \   0000003C   0xE1540001         CMP      R4,R1
   \   00000040   0x3A000002         BCC      ??COM15_0
    929              COMerr(0x02); //@@@@@@  - @@@@@@@@@@@@ @@@@@ @@@@@@
   \   00000044   0xE3A00002         MOV      R0,#+2
   \   00000048   0x........         BL       COMerr
   \   0000004C   0xEA00005F         B        ??COM15_1
    930          else
    931            if ( acrc > 3072)
   \                     ??COM15_0:
   \   00000050   0xE1580001         CMP      R8,R1
   \   00000054   0x3A000002         BCC      ??COM15_2
    932                      COMerr(0x03); //@@@@@@  - @@@@@@@@@@@@ @@@@@@@@ @@@@@@
   \   00000058   0xE3A00003         MOV      R0,#+3
   \   0000005C   0x........         BL       COMerr
   \   00000060   0xEA00005A         B        ??COM15_1
    933            else
    934              {
    935                  CRC16(COMMAND,9,0xFF,0);
   \                     ??COM15_2:
   \   00000064   0xE3A03000         MOV      R3,#+0
   \   00000068   0xE3A020FF         MOV      R2,#+255
   \   0000006C   0xE3A01009         MOV      R1,#+9
   \   00000070   0x........         BL       CRC16
    936                  if (adr == 0)
   \   00000074   0x........         LDR      R9,??DataTable29_8
   \   00000078   0xE3540000         CMP      R4,#+0
   \   0000007C   0x1A00000E         BNE      ??COM15_3
    937                        {/* @@@@@@ @@@@@@ @ @@@@@@@@ */
    938                          CRC16(LiveTime,TimeByte,0,0);
   \   00000080   0xE1A0B007         MOV      R11,R7
   \   00000084   0xE3A03000         MOV      R3,#+0
   \   00000088   0xE1A02003         MOV      R2,R3
   \   0000008C   0xE1A0100B         MOV      R1,R11
   \   00000090   0x........         LDR      R0,??DataTable29_12
   \   00000094   0x........         BL       CRC16
    939                          CRC16(BUFFSPECTR,kol-TimeByte,0,0);
   \   00000098   0xE3A03000         MOV      R3,#+0
   \   0000009C   0xE1A02003         MOV      R2,R3
   \   000000A0   0xE1A00005         MOV      R0,R5
   \   000000A4   0xE040100B         SUB      R1,R0,R11
   \   000000A8   0xE1A01801         LSL      R1,R1,#+16
   \   000000AC   0xE1A01841         ASR      R1,R1,#+16
   \   000000B0   0xE1A00009         MOV      R0,R9
   \   000000B4   0x........         BL       CRC16
   \   000000B8   0xEA00000A         B        ??COM15_4
    940                        }
    941                  else
    942                    CRC16(BUFFSPECTR+adr-TimeByte,kol,0,0);
   \                     ??COM15_3:
   \   000000BC   0xE3A03000         MOV      R3,#+0
   \   000000C0   0xE1A02003         MOV      R2,R3
   \   000000C4   0xE1A00005         MOV      R0,R5
   \   000000C8   0xE1A01000         MOV      R1,R0
   \   000000CC   0xE1A01801         LSL      R1,R1,#+16
   \   000000D0   0xE1A01841         ASR      R1,R1,#+16
   \   000000D4   0xE0890004         ADD      R0,R9,R4
   \   000000D8   0xE1A0C007         MOV      R12,R7
   \   000000DC   0xE26CC000         RSB      R12,R12,#+0
   \   000000E0   0xE080000C         ADD      R0,R0,R12
   \   000000E4   0x........         BL       CRC16
    943                  if( (CRClo == BUFFSPECTR[acrc]) && (CRChi == BUFFSPECTR[acrc+1]) )
   \                     ??COM15_4:
   \   000000E8   0xE1D600B2         LDRH     R0,[R6, #+2]
   \   000000EC   0xE7D91008         LDRB     R1,[R9, +R8]
   \   000000F0   0xE1500001         CMP      R0,R1
   \   000000F4   0x1A000032         BNE      ??COM15_5
   \   000000F8   0xE1D600B0         LDRH     R0,[R6, #+0]
   \   000000FC   0xE2891001         ADD      R1,R9,#+1
   \   00000100   0xE7D11008         LDRB     R1,[R1, +R8]
   \   00000104   0xE1500001         CMP      R0,R1
   \   00000108   0x1A00002D         BNE      ??COM15_5
    944                    {/*@@@@@@@@@@ @@@@@@@ */
    945                      if (adr == 0)
   \   0000010C   0xE3540000         CMP      R4,#+0
   \   00000110   0x1A000004         BNE      ??COM15_6
    946                      {
    947                        COMMANDtoUART(TimeByte+9);// @@@@@@ @@@@@@ @ @@@@@@@@
   \   00000114   0xE1A00007         MOV      R0,R7
   \   00000118   0xE2800009         ADD      R0,R0,#+9
   \   0000011C   0x........         BL       COMMANDtoUART
    948                        kol-=TimeByte;
   \   00000120   0xE045500A         SUB      R5,R5,R10
   \   00000124   0xEA000002         B        ??COM15_7
    949                      }
    950                      else
    951                      {
    952                        COMMANDtoUART(9);
   \                     ??COM15_6:
   \   00000128   0xE3A00009         MOV      R0,#+9
   \   0000012C   0x........         BL       COMMANDtoUART
    953                        adr-=TimeByte;
   \   00000130   0xE044400A         SUB      R4,R4,R10
    954                      }
    955          
    956                      for (i = -1; ++i < kol+2;)
   \                     ??COM15_7:
   \   00000134   0xE3E0A000         MVN      R10,#+0
   \   00000138   0xEA000002         B        ??COM15_8
    957                          {/*@@@@@@@@@@ @@@@@@ @ CRC*/
    958                              BYTEtoUART(BUFFSPECTR[adr+i]);
   \                     ??COM15_9:
   \   0000013C   0xE08A0004         ADD      R0,R10,R4
   \   00000140   0xE7D90000         LDRB     R0,[R9, +R0]
   \   00000144   0x........         BL       BYTEtoUART
    959                          }//for (i = -1; ++i < kol+2;)
   \                     ??COM15_8:
   \   00000148   0xE28AA001         ADD      R10,R10,#+1
   \   0000014C   0xE2850002         ADD      R0,R5,#+2
   \   00000150   0xE15A0000         CMP      R10,R0
   \   00000154   0x3AFFFFF8         BCC      ??COM15_9
    960          
    961                  if ((acrc) >= 3070)
   \   00000158   0xE3A000FE         MOV      R0,#+254
   \   0000015C   0xE3800EB0         ORR      R0,R0,#0xB00
   \   00000160   0xE1580000         CMP      R8,R0
   \   00000164   0x3A000019         BCC      ??COM15_1
    962                  { /* @@@@@@@@ @@@@ @@@@@@*/
    963          //          BUFFSPECTR[acrc] = 0; //@@@@@@ CRC
    964          //          BUFFSPECTR[acrc+1] = 0;
    965                    /* @@@@@@@@@*/
    966                    STOPEINT0();      //@@@@@@@@@@ @@@@@@@ TMR1 @ @@@@@@@@@ EINT0-@@@@@@@@ @@@@@ @@@@@@
   \   00000168   0x........         BL       STOPEINT0
    967                    if (TimeByte == 2) //@@@@ @@@@@@@@@@ @@@@@ @@ 2 @@@@@ - @@@@@@ @@@@@@@@@@@@@@
   \   0000016C   0xE3570002         CMP      R7,#+2
   \   00000170   0x1A000001         BNE      ??COM15_10
    968                          //TURNSPECTR(BUFFSPECTR,SPECTR);
    969                          TURNSPECTR_S_B();
   \   00000174   0x........         BL       TURNSPECTR_S_B
   \   00000178   0xEA000000         B        ??COM15_11
    970                    else
    971                          //MOVSPECTR(BUFFSPECTR,SPECTR);
    972                          MOVSPECTR_S_B();
   \                     ??COM15_10:
   \   0000017C   0x........         BL       MOVSPECTR_S_B
    973                   kol = ((LiveTime[3] << 24)| (LiveTime[2] << 16)| (LiveTime[1] << 8)| LiveTime[0])*1000; /*@ @@@@@*/
    974                   T1TC  = kol;
   \                     ??COM15_11:
   \   00000180   0xE3A0128E         MOV      R1,#-536870904
   \   00000184   0xE3811C80         ORR      R1,R1,#0x8000
   \   00000188   0x........         LDR      R0,??DataTable29_12
   \   0000018C   0xE5D02003         LDRB     R2,[R0, #+3]
   \   00000190   0xE5D03002         LDRB     R3,[R0, #+2]
   \   00000194   0xE1A03803         LSL      R3,R3,#+16
   \   00000198   0xE1832C02         ORR      R2,R3,R2, LSL #+24
   \   0000019C   0xE5D03001         LDRB     R3,[R0, #+1]
   \   000001A0   0xE1822403         ORR      R2,R2,R3, LSL #+8
   \   000001A4   0xE5D00000         LDRB     R0,[R0, #+0]
   \   000001A8   0xE1800002         ORR      R0,R0,R2
   \   000001AC   0xE3A02FFA         MOV      R2,#+1000
   \   000001B0   0xE0000092         MUL      R0,R2,R0
   \   000001B4   0xE5810000         STR      R0,[R1, #+0]
    975                   T1PC  = 0;
   \   000001B8   0xE3A00000         MOV      R0,#+0
   \   000001BC   0xE5810008         STR      R0,[R1, #+8]
   \   000001C0   0xEA000002         B        ??COM15_1
    976                  }//@@@@@@@@ @@@@ @@@@@@
    977            }// CRC @@@@@@@@@
    978            else
    979              LiveTime[1] = 0;
   \                     ??COM15_5:
   \   000001C4   0xE3A00000         MOV      R0,#+0
   \   000001C8   0x........         LDR      R1,??DataTable29_12
   \   000001CC   0xE5C10001         STRB     R0,[R1, #+1]
    980          }// @@@ @@@@@@
    981          STARTEINT0(); //@@@@@@@@@ @@@@@@@@@, @@@@ @@@@@@@@@
   \                     ??COM15_1:
   \   000001D0   0x........         BL       STARTEINT0
    982          ByteCurrentIzm = 0;
   \   000001D4   0xE3A00000         MOV      R0,#+0
   \   000001D8   0xE5860004         STR      R0,[R6, #+4]
    983          }// END COM15
   \   000001DC   0xE8BD4FF1         POP      {R0,R4-R11,LR}
   \   000001E0   0xE12FFF1E         BX       LR               ;; return
   \   000001E4                      REQUIRE T1TC
   \   000001E4                      REQUIRE T1PC
    984          /****************************************************************************/
    985          /******* @@@@@@@@ @@@@@@@ @@@@@@@@@@@@@ @@@@@@@@@  ********/
    986          /* CRC @@@@@@@@@ @@@@@@@@*/

   \                                 In section .text, align 4, keep-with-next
    987          void TABLTempUART(void)
    988          {
   \                     TABLTempUART:
   \   00000000   0xE92D4010         PUSH     {R4,LR}
    989           int i;
    990          
    991           COMMANDtoUART(3);
   \   00000004   0xE3A00003         MOV      R0,#+3
   \   00000008   0x........         BL       COMMANDtoUART
    992           for (i = -1; ++i < 122;)
   \   0000000C   0xE3E04000         MVN      R4,#+0
   \   00000010   0xEA000002         B        ??TABLTempUART_0
    993                            BYTEtoUART(TABLTemperCORR[i]); /* @@@@@@ */
   \                     ??TABLTempUART_1:
   \   00000014   0x........         LDR      R0,??DataTable29_13
   \   00000018   0xE7D00004         LDRB     R0,[R0, +R4]
   \   0000001C   0x........         BL       BYTEtoUART
   \                     ??TABLTempUART_0:
   \   00000020   0xE2844001         ADD      R4,R4,#+1
   \   00000024   0xE354007A         CMP      R4,#+122
   \   00000028   0xBAFFFFF9         BLT      ??TABLTempUART_1
    994            BYTEtoUART(CRClo);
   \   0000002C   0x........         LDR      R4,??DataTable29_7
   \   00000030   0xE1D400B2         LDRH     R0,[R4, #+2]
   \   00000034   0xE20000FF         AND      R0,R0,#0xFF
   \   00000038   0x........         BL       BYTEtoUART
    995            BYTEtoUART(CRChi);
   \   0000003C   0xE1D400B0         LDRH     R0,[R4, #+0]
   \   00000040   0xE20000FF         AND      R0,R0,#0xFF
   \   00000044   0xE8BD4010         POP      {R4,LR}
   \   00000048   0x........         B        BYTEtoUART       ;; tailcall
    996          }
    997          /****************************************************************************/
    998          /******* @@@@@@@@ @@@@@@@ @@@@@@@@@@@@@ @@@@@@@@@ ********/

   \                                 In section .text, align 4, keep-with-next
    999          void COM16(void)
   1000          {
   \                     COM16:
   \   00000000   0xE92D4070         PUSH     {R4-R6,LR}
   1001          
   1002           CRC16(COMMAND,3,0xFF,0);
   \   00000004   0x........         LDR      R4,??DataTable29_11
   \   00000008   0xE3A03000         MOV      R3,#+0
   \   0000000C   0xE3A020FF         MOV      R2,#+255
   \   00000010   0xE3A01003         MOV      R1,#+3
   \   00000014   0xE1A00004         MOV      R0,R4
   \   00000018   0x........         BL       CRC16
   1003           CRC16(TABLTemperCORR,122,0,0);
   \   0000001C   0x........         LDR      R5,??DataTable29_13
   \   00000020   0xE3A03000         MOV      R3,#+0
   \   00000024   0xE1A02003         MOV      R2,R3
   \   00000028   0xE3A0107A         MOV      R1,#+122
   \   0000002C   0xE1A00005         MOV      R0,R5
   \   00000030   0x........         BL       CRC16
   1004           if( (CRClo == TABLTemperCORR[122]) && (CRChi == TABLTemperCORR[123]) )
   \   00000034   0x........         LDR      R6,??DataTable29_7
   \   00000038   0xE1D600B2         LDRH     R0,[R6, #+2]
   \   0000003C   0xE5D5107A         LDRB     R1,[R5, #+122]
   \   00000040   0xE1500001         CMP      R0,R1
   \   00000044   0x1A00000F         BNE      ??COM16_0
   \   00000048   0xE1D600B0         LDRH     R0,[R6, #+0]
   \   0000004C   0xE5D5107B         LDRB     R1,[R5, #+123]
   \   00000050   0xE1500001         CMP      R0,R1
   \   00000054   0x1A00000B         BNE      ??COM16_0
   1005            {//CRC @@@@@@@@@
   1006             I2CTABLTempW();  //@@@@@@ @@@@@ @@@@@@@ @ EEPROM + CRC + flag
   \   00000058   0x........         BL       I2CTABLTempW
   1007             //DeInitialiseI2C();
   1008             CRC16(COMMAND,3,0xFF,0);
   \   0000005C   0xE3A03000         MOV      R3,#+0
   \   00000060   0xE3A020FF         MOV      R2,#+255
   \   00000064   0xE3A01003         MOV      R1,#+3
   \   00000068   0xE1A00004         MOV      R0,R4
   \   0000006C   0x........         BL       CRC16
   1009             CRC16(TABLTemperCORR,122,0,0);  //@@@@@@@ CRC
   \   00000070   0xE3A03000         MOV      R3,#+0
   \   00000074   0xE1A02003         MOV      R2,R3
   \   00000078   0xE3A0107A         MOV      R1,#+122
   \   0000007C   0xE1A00005         MOV      R0,R5
   \   00000080   0x........         BL       CRC16
   1010             TABLTempUART();  //@@@@@@@@@@ @@@@@@@ +CRC (@@ @@@@@@@)
   \   00000084   0x........         BL       TABLTempUART
   1011            }//CRC @@@@@@@@@
   1012          ByteCurrentIzm = 0;
   \                     ??COM16_0:
   \   00000088   0xE3A00000         MOV      R0,#+0
   \   0000008C   0xE5860004         STR      R0,[R6, #+4]
   1013          }// end COM16
   \   00000090   0xE8BD4070         POP      {R4-R6,LR}
   \   00000094   0xE12FFF1E         BX       LR               ;; return
   1014          /****************************************************************************/
   1015          /******* @@@@@@ @@@@@@@ @@@@@@@@@@@@@ @@@@@@@@@ ********/

   \                                 In section .text, align 4, keep-with-next
   1016          void COM17(void)
   1017          {
   \                     COM17:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
   1018           COMMAND[2] = 0x7A; // @@@@@@@@@@ 61(122@@@@@) @@@@@@@@ @@@ @@@@@@@@ @ @@@@
   \   00000004   0x........         LDR      R0,??DataTable29_11
   \   00000008   0xE3A0107A         MOV      R1,#+122
   \   0000000C   0xE5C01002         STRB     R1,[R0, #+2]
   1019           CRC16(COMMAND,3,0xFF,0);
   \   00000010   0xE3A03000         MOV      R3,#+0
   \   00000014   0xE3A020FF         MOV      R2,#+255
   \   00000018   0xE3A01003         MOV      R1,#+3
   \   0000001C   0x........         BL       CRC16
   1020           CRC16(TABLTemperCORR,122,0,0);
   \   00000020   0xE3A03000         MOV      R3,#+0
   \   00000024   0xE1A02003         MOV      R2,R3
   \   00000028   0xE3A0107A         MOV      R1,#+122
   \   0000002C   0x........         LDR      R0,??DataTable29_13
   \   00000030   0x........         BL       CRC16
   1021           TABLTempUART();  //@@@@@@@@ +CRC
   \   00000034   0xE8BD4001         POP      {R0,LR}
   \   00000038   0x........         B        TABLTempUART     ;; tailcall
   1022          }// end COM17
   1023          /****************************************************************************/
   1024          
   1025          
   1026           //------------ 27.11.2015  @@@ @@@@@@@@@@@@ WDT---------------------
   1027          /****************************************************************************/
   1028          // @@@ @@@@@@@ WDT @@@@@@@@ @@@@@@@@@ !!!!!!!!!

   \                                 In section .text, align 4, keep-with-next
   1029          void COM20(void)
   1030          {
   \                     COM20:
   \   00000000   0xE92D5000         PUSH     {R12,LR}
   1031             COMMAND[2] = WDMOD_temp;
   \   00000004   0x........         LDR      R0,??DataTable29_11
   \   00000008   0x........         LDR      R1,??DataTable29_14
   \   0000000C   0xE5D11000         LDRB     R1,[R1, #+0]
   \   00000010   0xE5C01002         STRB     R1,[R0, #+2]
   1032          
   1033              CRC16(COMMAND,3,0xFF,1);
   \   00000014   0xE3A03001         MOV      R3,#+1
   \   00000018   0xE3A020FF         MOV      R2,#+255
   \   0000001C   0xE3A01003         MOV      R1,#+3
   \   00000020   0x........         BL       CRC16
   1034              COMMANDtoUART(5);
   \   00000024   0xE3A00005         MOV      R0,#+5
   \   00000028   0x........         BL       COMMANDtoUART
   1035              //------------ 27.11.2015  @@@ @@@@@@@@@@@@ WDT---------------------
   1036              while(1)
   \                     ??COM20_0:
   \   0000002C   0xEAFFFFFE         B        ??COM20_0
   1037              {
   1038          
   1039          
   1040              }
   1041          }// END COM20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     CRChi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     COMMAND

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x........         DC32     BUFFSPECTR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x........         DC32     SPECTR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     FLAG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     TEMPERFLOAT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x........         DC32     TEMPERFLOATtek

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x........         DC32     COMMAND

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0xE01FC140         DC32     0xe01fc140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x........         DC32     TIMEIZMsek

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x........         DC32     KODADC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x........         DC32     MINPOROG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x........         DC32     MAXPOROG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \   00000000   0x........         DC32     TIMER0_INTERVAL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0x408F4000         DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0x........         DC32     T1TC_stop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   0x........         DC32     Test_WDT_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \   00000000   0x........         DC32     T1TC_temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_2:
   \   00000000   0xE0008018         DC32     0xe0008018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_3:
   \   00000000   0x........         DC32     KODADCEEPROM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_4:
   \   00000000   0x........         DC32     Temp_i

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_5:
   \   00000000   0x........         DC32     MasInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_6:
   \   00000000   0x........         DC32     FLAGOver3byte

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_7:
   \   00000000   0x........         DC32     CRChi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_8:
   \   00000000   0x........         DC32     BUFFSPECTR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_9:
   \   00000000   0x........         DC32     MasEEPROMKoef

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_10:
   \   00000000   0x........         DC32     COMMAND_temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_11:
   \   00000000   0x........         DC32     COMMAND

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_12:
   \   00000000   0x........         DC32     LiveTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_13:
   \   00000000   0x........         DC32     TABLTemperCORR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_14:
   \   00000000   0x........         DC32     WDMOD_temp
   1042          /****************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BYTEtoUART
      16   COM10
        16   -> COMMANDtoUART
        16   -> COMerr02
        16   -> CRC16
         0   -> I2CMasKoefW
       8   COM11
         0   -> COMMANDtoUART
         8   -> CRC16
         8   -> I2CMasKoefR
         8   -> toCOMMAND2byte
      24   COM12
         0   -> BYTEtoUART
        24   -> BYTEtoUART
        24   -> COMMANDtoUART
         0   -> COMerr
        24   -> CRC16
      24   COM13
        24   -> BYTEtoUART
        24   -> COMMANDtoUART
        24   -> COMerr
        24   -> CRC16
      40   COM15
        40   -> BYTEtoUART
        40   -> COMMANDtoUART
        40   -> COMerr
        40   -> CRC16
        40   -> MOVSPECTR_S_B
        40   -> STARTEINT0
        40   -> STOPEINT0
        40   -> TURNSPECTR_S_B
      16   COM16
        16   -> CRC16
        16   -> I2CTABLTempW
        16   -> TABLTempUART
       8   COM17
         8   -> CRC16
         0   -> TABLTempUART
       8   COM20
         8   -> COMMANDtoUART
         8   -> CRC16
      24   COM3
         0   -> COMMANDtoUART
         0   -> COMerr
        24   -> COMerr02
        24   -> CRC16
        24   -> __aeabi_d2f
        24   -> __aeabi_ddiv
        24   -> __aeabi_f2d
        24   -> toCOMMAND2byte
      24   COM4
        24   -> COMMANDtoUART
         0   -> COMerr
        24   -> COMerr02
        24   -> CRC16
        24   -> TakingTemperature
        24   -> toCOMMAND2byte
        24 __aeabi_idiv
      16   COM5
         0   -> COMMANDtoUART
         0   -> COMerr
        16   -> COMerr02
        16   -> ClearSPECTR
        16   -> I2CTABLTempFlagW
        16   -> InitialiseTimer1
        16   -> STARTEINT0
        16   -> STOPEINT0
      24   COM6
        24   -> COMMANDtoUART
        24   -> COMerr02
        24   -> CRC16
        24   -> I2CIntevarTemperW
        24   -> I2CKOEFF
        24   -> InitialiseTimer0
        24   -> RESETTMR0
        24   -> ReadEEPROMIntervalTemper
        24   -> SETKOEFF
         0   -> STARTEINT0
        24   -> STARTEINT0
        24   -> STOPEINT0
        24   -> ZAPFACTOR
       8   COM7
         0   -> COMMANDtoUART
         8   -> CRC16
      16   COM8
         0   -> COMMANDtoUART
        16   -> COMMANDtoUART
         0   -> COMerr
         0   -> COMerr02
        16   -> CRC16
         0   -> InitialiseUART0
      24   COMB
         0   -> BYTEtoUART
        24   -> BYTEtoUART
        24   -> COMMANDtoUART
         0   -> COMerr
         0   -> COMerr02
        24   -> CRC16
        24   -> MOVSPECTR_B_S
        24   -> TURNSPECTR_B_S
      16   COMMANDtoUART
        16   -> BYTEtoUART
       0   COMMANDtoUARTnew
       8   COMerr
         8   -> COMMANDtoUART
         8   -> CRC16
         0   -> ClearCOMMAND
       8   COMerr02
         8   -> COMerr
      16   CRC16
       8   MOVSPECTR_B_S
       8   MOVSPECTR_S_B
       0   STARTEINT0
       0   STOPEINT0
       8   TABLTempUART
         0   -> BYTEtoUART
         8   -> BYTEtoUART
         8   -> COMMANDtoUART
       0   TURNSPECTR
       4   TURNSPECTR_B_S
       4   TURNSPECTR_S_B
      24   TakingTemperature
        24   -> __aeabi_d2iz
        24   -> __aeabi_dmul
        24   -> __aeabi_dsub
        24   -> __aeabi_f2d
        24   -> __aeabi_f2iz
        24   -> __aeabi_ui2d
        24 __aeabi_cfrcmple
       0   toCOMMAND2byte
       0   toShort2COMMAND


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable29_10
       4  ??DataTable29_11
       4  ??DataTable29_12
       4  ??DataTable29_13
       4  ??DataTable29_14
       4  ??DataTable29_2
       4  ??DataTable29_3
       4  ??DataTable29_4
       4  ??DataTable29_5
       4  ??DataTable29_6
       4  ??DataTable29_7
       4  ??DataTable29_8
       4  ??DataTable29_9
      28  BYTEtoUART
     288  COM10
     140  COM11
     232  COM12
     256  COM13
     484  COM15
     152  COM16
      60  COM17
      48  COM20
     512  COM3
     476  COM4
     344  COM5
     488  COM6
     144  COM7
     520  COM8
     248  COMB
       8  COMMAND_temp
      48  COMMANDtoUART
      56  COMMANDtoUARTnew
      60  COMerr
      36  COMerr02
     140  CRC16
     752  CRChi
          CRClo
          ByteCurrentIzm
          TEMPERATURE
          flagTIME2
          TimeByte
          CurrentDIzm
          auchCRCHi
          auchCRCLo
      76  MOVSPECTR_B_S
      76  MOVSPECTR_S_B
      60  STARTEINT0
      88  STOPEINT0
       4  T1MR0
       4  T1PC
       4  T1TC
      76  TABLTempUART
      64  TURNSPECTR
      76  TURNSPECTR_B_S
      76  TURNSPECTR_S_B
     336  TakingTemperature
       1  U0RBRTHR
       4  _A_EXTINT
       4  _A_T1TCR
       1  _A_U0LSR
       4  _A_VICIntEnClear
       4  _A_VICIntEnable
      40  toCOMMAND2byte
      32  toShort2COMMAND

 
     8 bytes in section .bss
   752 bytes in section .data
    30 bytes in section .noinit  (abs)
 5 884 bytes in section .text
 
 5 884 bytes of CODE memory
   760 bytes of DATA memory (+ 30 bytes shared)

Errors: none
Warnings: 2
